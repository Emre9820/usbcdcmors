
Morse_Code_Emre_Ozturk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003030  08003030  00013030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003048  08003048  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003048  08003048  00013048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003050  08003050  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003050  08003050  00013050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003054  08003054  00013054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003058  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000000d0  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000e4  200000e4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df53  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a53  00000000  00000000  0002df97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba0  00000000  00000000  0002f9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b08  00000000  00000000  00030590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000208fe  00000000  00000000  00031098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d79a  00000000  00000000  00051996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9ccc  00000000  00000000  0005f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00128dfc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030e0  00000000  00000000  00128e50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003018 	.word	0x08003018

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08003018 	.word	0x08003018

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b096      	sub	sp, #88	; 0x58
 80004d4:	af00      	add	r7, sp, #0
  HAL_Init();
 80004d6:	f000 ffc1 	bl	800145c <HAL_Init>
  SystemClock_Config();
 80004da:	f000 fd59 	bl	8000f90 <SystemClock_Config>
  MX_GPIO_Init();
 80004de:	f000 fdeb 	bl	80010b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004e2:	f000 fdbf 	bl	8001064 <MX_USART1_UART_Init>

  while (1)
  {
	  //record one short-press [E]
	  if(!charAcquire[0])
 80004e6:	4b9e      	ldr	r3, [pc, #632]	; (8000760 <main+0x290>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d139      	bne.n	8000562 <main+0x92>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > shortPressTime)
 80004ee:	4b9d      	ldr	r3, [pc, #628]	; (8000764 <main+0x294>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d018      	beq.n	8000528 <main+0x58>
 80004f6:	2101      	movs	r1, #1
 80004f8:	489b      	ldr	r0, [pc, #620]	; (8000768 <main+0x298>)
 80004fa:	f001 fa93 	bl	8001a24 <HAL_GPIO_ReadPin>
 80004fe:	4603      	mov	r3, r0
 8000500:	2b00      	cmp	r3, #0
 8000502:	d011      	beq.n	8000528 <main+0x58>
 8000504:	f000 ffe0 	bl	80014c8 <HAL_GetTick>
 8000508:	4602      	mov	r2, r0
 800050a:	4b98      	ldr	r3, [pc, #608]	; (800076c <main+0x29c>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	1ad2      	subs	r2, r2, r3
 8000510:	4b97      	ldr	r3, [pc, #604]	; (8000770 <main+0x2a0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	429a      	cmp	r2, r3
 8000516:	d907      	bls.n	8000528 <main+0x58>
			{
				dotFlag = 1;
 8000518:	4b96      	ldr	r3, [pc, #600]	; (8000774 <main+0x2a4>)
 800051a:	2201      	movs	r2, #1
 800051c:	801a      	strh	r2, [r3, #0]
				ledBlinksShortPress(dotFlag);
 800051e:	4b95      	ldr	r3, [pc, #596]	; (8000774 <main+0x2a4>)
 8000520:	881b      	ldrh	r3, [r3, #0]
 8000522:	4618      	mov	r0, r3
 8000524:	f000 fcce 	bl	8000ec4 <ledBlinksShortPress>
			}

			if(dotFlag)
 8000528:	4b92      	ldr	r3, [pc, #584]	; (8000774 <main+0x2a4>)
 800052a:	881b      	ldrh	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d0da      	beq.n	80004e6 <main+0x16>
			{
				charAcquire[0] = 1;
 8000530:	4b8b      	ldr	r3, [pc, #556]	; (8000760 <main+0x290>)
 8000532:	2201      	movs	r2, #1
 8000534:	701a      	strb	r2, [r3, #0]
				dotFlag = 0;
 8000536:	4b8f      	ldr	r3, [pc, #572]	; (8000774 <main+0x2a4>)
 8000538:	2200      	movs	r2, #0
 800053a:	801a      	strh	r2, [r3, #0]

				char buf[8] = "E";
 800053c:	2345      	movs	r3, #69	; 0x45
 800053e:	653b      	str	r3, [r7, #80]	; 0x50
 8000540:	2300      	movs	r3, #0
 8000542:	657b      	str	r3, [r7, #84]	; 0x54
				HAL_UART_Transmit(&huart1,(uint8_t *)buf,strlen(buf),1000);
 8000544:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000548:	4618      	mov	r0, r3
 800054a:	f7ff fe3d 	bl	80001c8 <strlen>
 800054e:	4603      	mov	r3, r0
 8000550:	b29a      	uxth	r2, r3
 8000552:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055a:	4887      	ldr	r0, [pc, #540]	; (8000778 <main+0x2a8>)
 800055c:	f002 fa67 	bl	8002a2e <HAL_UART_Transmit>
 8000560:	e7c1      	b.n	80004e6 <main+0x16>
			}
	  }

	  //record two long-press [M]
	  else if(charAcquire[0] && !charAcquire[1])
 8000562:	4b7f      	ldr	r3, [pc, #508]	; (8000760 <main+0x290>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d049      	beq.n	80005fe <main+0x12e>
 800056a:	4b7d      	ldr	r3, [pc, #500]	; (8000760 <main+0x290>)
 800056c:	785b      	ldrb	r3, [r3, #1]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d145      	bne.n	80005fe <main+0x12e>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > longPressTime)
 8000572:	4b7c      	ldr	r3, [pc, #496]	; (8000764 <main+0x294>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d022      	beq.n	80005c0 <main+0xf0>
 800057a:	2101      	movs	r1, #1
 800057c:	487a      	ldr	r0, [pc, #488]	; (8000768 <main+0x298>)
 800057e:	f001 fa51 	bl	8001a24 <HAL_GPIO_ReadPin>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d01b      	beq.n	80005c0 <main+0xf0>
 8000588:	f000 ff9e 	bl	80014c8 <HAL_GetTick>
 800058c:	4602      	mov	r2, r0
 800058e:	4b77      	ldr	r3, [pc, #476]	; (800076c <main+0x29c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	1ad2      	subs	r2, r2, r3
 8000594:	4b79      	ldr	r3, [pc, #484]	; (800077c <main+0x2ac>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	429a      	cmp	r2, r3
 800059a:	d911      	bls.n	80005c0 <main+0xf0>
			{
				dashFlag++;
 800059c:	4b78      	ldr	r3, [pc, #480]	; (8000780 <main+0x2b0>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4b76      	ldr	r3, [pc, #472]	; (8000780 <main+0x2b0>)
 80005a6:	801a      	strh	r2, [r3, #0]
				if(dashFlag == 2)
 80005a8:	4b75      	ldr	r3, [pc, #468]	; (8000780 <main+0x2b0>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	2b02      	cmp	r3, #2
 80005ae:	d104      	bne.n	80005ba <main+0xea>
					ledBlinksLongPress(dashFlag);
 80005b0:	4b73      	ldr	r3, [pc, #460]	; (8000780 <main+0x2b0>)
 80005b2:	881b      	ldrh	r3, [r3, #0]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f000 fcad 	bl	8000f14 <ledBlinksLongPress>

				buttonPressed = 0;
 80005ba:	4b6a      	ldr	r3, [pc, #424]	; (8000764 <main+0x294>)
 80005bc:	2200      	movs	r2, #0
 80005be:	701a      	strb	r2, [r3, #0]
			}

			if(dashFlag == 2)
 80005c0:	4b6f      	ldr	r3, [pc, #444]	; (8000780 <main+0x2b0>)
 80005c2:	881b      	ldrh	r3, [r3, #0]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	f040 8468 	bne.w	8000e9a <main+0x9ca>
			{
				charAcquire[1] = 1;
 80005ca:	4b65      	ldr	r3, [pc, #404]	; (8000760 <main+0x290>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	705a      	strb	r2, [r3, #1]
				dashFlag = 0;
 80005d0:	4b6b      	ldr	r3, [pc, #428]	; (8000780 <main+0x2b0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	801a      	strh	r2, [r3, #0]

				char buf[8] = "M";
 80005d6:	234d      	movs	r3, #77	; 0x4d
 80005d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80005da:	2300      	movs	r3, #0
 80005dc:	64fb      	str	r3, [r7, #76]	; 0x4c
				HAL_UART_Transmit(&huart1,(uint8_t *)buf,strlen(buf),1000);
 80005de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005e2:	4618      	mov	r0, r3
 80005e4:	f7ff fdf0 	bl	80001c8 <strlen>
 80005e8:	4603      	mov	r3, r0
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80005f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f4:	4860      	ldr	r0, [pc, #384]	; (8000778 <main+0x2a8>)
 80005f6:	f002 fa1a 	bl	8002a2e <HAL_UART_Transmit>
			if(dashFlag == 2)
 80005fa:	f000 bc4e 	b.w	8000e9a <main+0x9ca>
			}
	  }

	  //record short-long-short press [R]
	  else if(charAcquire[1] && !charAcquire[2])
 80005fe:	4b58      	ldr	r3, [pc, #352]	; (8000760 <main+0x290>)
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d02d      	beq.n	8000662 <main+0x192>
 8000606:	4b56      	ldr	r3, [pc, #344]	; (8000760 <main+0x290>)
 8000608:	789b      	ldrb	r3, [r3, #2]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d129      	bne.n	8000662 <main+0x192>
	  {

			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > shortPressTime)
 800060e:	4b55      	ldr	r3, [pc, #340]	; (8000764 <main+0x294>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d018      	beq.n	8000648 <main+0x178>
 8000616:	2101      	movs	r1, #1
 8000618:	4853      	ldr	r0, [pc, #332]	; (8000768 <main+0x298>)
 800061a:	f001 fa03 	bl	8001a24 <HAL_GPIO_ReadPin>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d011      	beq.n	8000648 <main+0x178>
 8000624:	f000 ff50 	bl	80014c8 <HAL_GetTick>
 8000628:	4602      	mov	r2, r0
 800062a:	4b50      	ldr	r3, [pc, #320]	; (800076c <main+0x29c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	1ad2      	subs	r2, r2, r3
 8000630:	4b4f      	ldr	r3, [pc, #316]	; (8000770 <main+0x2a0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	429a      	cmp	r2, r3
 8000636:	d907      	bls.n	8000648 <main+0x178>
			{
				dotFlag = 1;
 8000638:	4b4e      	ldr	r3, [pc, #312]	; (8000774 <main+0x2a4>)
 800063a:	2201      	movs	r2, #1
 800063c:	801a      	strh	r2, [r3, #0]
				ledBlinksShortPress(dotFlag);
 800063e:	4b4d      	ldr	r3, [pc, #308]	; (8000774 <main+0x2a4>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fc3e 	bl	8000ec4 <ledBlinksShortPress>
			}
			if(dotFlag)
 8000648:	4b4a      	ldr	r3, [pc, #296]	; (8000774 <main+0x2a4>)
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	f000 8424 	beq.w	8000e9a <main+0x9ca>
			{
				charAcquire[2] = 1;
 8000652:	4b43      	ldr	r3, [pc, #268]	; (8000760 <main+0x290>)
 8000654:	2201      	movs	r2, #1
 8000656:	709a      	strb	r2, [r3, #2]
				dotFlag = 0;
 8000658:	4b46      	ldr	r3, [pc, #280]	; (8000774 <main+0x2a4>)
 800065a:	2200      	movs	r2, #0
 800065c:	801a      	strh	r2, [r3, #0]
			if(dotFlag)
 800065e:	f000 bc1c 	b.w	8000e9a <main+0x9ca>
			}
	  }

	  else if(charAcquire[2] && !charAcquire[3])
 8000662:	4b3f      	ldr	r3, [pc, #252]	; (8000760 <main+0x290>)
 8000664:	789b      	ldrb	r3, [r3, #2]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d036      	beq.n	80006d8 <main+0x208>
 800066a:	4b3d      	ldr	r3, [pc, #244]	; (8000760 <main+0x290>)
 800066c:	78db      	ldrb	r3, [r3, #3]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d132      	bne.n	80006d8 <main+0x208>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > longPressTime)
 8000672:	4b3c      	ldr	r3, [pc, #240]	; (8000764 <main+0x294>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d022      	beq.n	80006c0 <main+0x1f0>
 800067a:	2101      	movs	r1, #1
 800067c:	483a      	ldr	r0, [pc, #232]	; (8000768 <main+0x298>)
 800067e:	f001 f9d1 	bl	8001a24 <HAL_GPIO_ReadPin>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d01b      	beq.n	80006c0 <main+0x1f0>
 8000688:	f000 ff1e 	bl	80014c8 <HAL_GetTick>
 800068c:	4602      	mov	r2, r0
 800068e:	4b37      	ldr	r3, [pc, #220]	; (800076c <main+0x29c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	1ad2      	subs	r2, r2, r3
 8000694:	4b39      	ldr	r3, [pc, #228]	; (800077c <main+0x2ac>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	d911      	bls.n	80006c0 <main+0x1f0>
			{
				dashFlag++;
 800069c:	4b38      	ldr	r3, [pc, #224]	; (8000780 <main+0x2b0>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	4b36      	ldr	r3, [pc, #216]	; (8000780 <main+0x2b0>)
 80006a6:	801a      	strh	r2, [r3, #0]
				if(dashFlag == 1)
 80006a8:	4b35      	ldr	r3, [pc, #212]	; (8000780 <main+0x2b0>)
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d104      	bne.n	80006ba <main+0x1ea>
					ledBlinksLongPress(dashFlag);
 80006b0:	4b33      	ldr	r3, [pc, #204]	; (8000780 <main+0x2b0>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fc2d 	bl	8000f14 <ledBlinksLongPress>

				buttonPressed = 0;
 80006ba:	4b2a      	ldr	r3, [pc, #168]	; (8000764 <main+0x294>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
			}

			if(dashFlag)
 80006c0:	4b2f      	ldr	r3, [pc, #188]	; (8000780 <main+0x2b0>)
 80006c2:	881b      	ldrh	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	f000 83e8 	beq.w	8000e9a <main+0x9ca>
			{
				charAcquire[3] = 1;
 80006ca:	4b25      	ldr	r3, [pc, #148]	; (8000760 <main+0x290>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	70da      	strb	r2, [r3, #3]
				dashFlag = 0;
 80006d0:	4b2b      	ldr	r3, [pc, #172]	; (8000780 <main+0x2b0>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	801a      	strh	r2, [r3, #0]
			if(dashFlag)
 80006d6:	e3e0      	b.n	8000e9a <main+0x9ca>
			}
	  }

	  else if(charAcquire[3] && !charAcquire[4])
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <main+0x290>)
 80006da:	78db      	ldrb	r3, [r3, #3]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d051      	beq.n	8000784 <main+0x2b4>
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <main+0x290>)
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d14d      	bne.n	8000784 <main+0x2b4>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > shortPressTime)
 80006e8:	4b1e      	ldr	r3, [pc, #120]	; (8000764 <main+0x294>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d018      	beq.n	8000722 <main+0x252>
 80006f0:	2101      	movs	r1, #1
 80006f2:	481d      	ldr	r0, [pc, #116]	; (8000768 <main+0x298>)
 80006f4:	f001 f996 	bl	8001a24 <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d011      	beq.n	8000722 <main+0x252>
 80006fe:	f000 fee3 	bl	80014c8 <HAL_GetTick>
 8000702:	4602      	mov	r2, r0
 8000704:	4b19      	ldr	r3, [pc, #100]	; (800076c <main+0x29c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	1ad2      	subs	r2, r2, r3
 800070a:	4b19      	ldr	r3, [pc, #100]	; (8000770 <main+0x2a0>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	429a      	cmp	r2, r3
 8000710:	d907      	bls.n	8000722 <main+0x252>
			{
				dotFlag = 1;
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <main+0x2a4>)
 8000714:	2201      	movs	r2, #1
 8000716:	801a      	strh	r2, [r3, #0]
				ledBlinksShortPress(dotFlag);
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <main+0x2a4>)
 800071a:	881b      	ldrh	r3, [r3, #0]
 800071c:	4618      	mov	r0, r3
 800071e:	f000 fbd1 	bl	8000ec4 <ledBlinksShortPress>
			}
			if(dotFlag)
 8000722:	4b14      	ldr	r3, [pc, #80]	; (8000774 <main+0x2a4>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	f000 83b7 	beq.w	8000e9a <main+0x9ca>
			{
				charAcquire[4] = 1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <main+0x290>)
 800072e:	2201      	movs	r2, #1
 8000730:	711a      	strb	r2, [r3, #4]
				dotFlag = 0;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <main+0x2a4>)
 8000734:	2200      	movs	r2, #0
 8000736:	801a      	strh	r2, [r3, #0]

				char buf[8] = "R";
 8000738:	2352      	movs	r3, #82	; 0x52
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
 800073c:	2300      	movs	r3, #0
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
				HAL_UART_Transmit(&huart1,(uint8_t *)buf,strlen(buf),1000);
 8000740:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff fd3f 	bl	80001c8 <strlen>
 800074a:	4603      	mov	r3, r0
 800074c:	b29a      	uxth	r2, r3
 800074e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	4808      	ldr	r0, [pc, #32]	; (8000778 <main+0x2a8>)
 8000758:	f002 f969 	bl	8002a2e <HAL_UART_Transmit>
			if(dotFlag)
 800075c:	e39d      	b.n	8000e9a <main+0x9ca>
 800075e:	bf00      	nop
 8000760:	2000003c 	.word	0x2000003c
 8000764:	20000034 	.word	0x20000034
 8000768:	40020000 	.word	0x40020000
 800076c:	20000030 	.word	0x20000030
 8000770:	20000004 	.word	0x20000004
 8000774:	20000036 	.word	0x20000036
 8000778:	20000054 	.word	0x20000054
 800077c:	20000000 	.word	0x20000000
 8000780:	20000038 	.word	0x20000038
			}
	  }

	  //record short press [E]
	  else if(charAcquire[4] && !charAcquire[5])
 8000784:	4b8c      	ldr	r3, [pc, #560]	; (80009b8 <main+0x4e8>)
 8000786:	791b      	ldrb	r3, [r3, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d03f      	beq.n	800080c <main+0x33c>
 800078c:	4b8a      	ldr	r3, [pc, #552]	; (80009b8 <main+0x4e8>)
 800078e:	795b      	ldrb	r3, [r3, #5]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d13b      	bne.n	800080c <main+0x33c>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > shortPressTime)
 8000794:	4b89      	ldr	r3, [pc, #548]	; (80009bc <main+0x4ec>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d018      	beq.n	80007ce <main+0x2fe>
 800079c:	2101      	movs	r1, #1
 800079e:	4888      	ldr	r0, [pc, #544]	; (80009c0 <main+0x4f0>)
 80007a0:	f001 f940 	bl	8001a24 <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d011      	beq.n	80007ce <main+0x2fe>
 80007aa:	f000 fe8d 	bl	80014c8 <HAL_GetTick>
 80007ae:	4602      	mov	r2, r0
 80007b0:	4b84      	ldr	r3, [pc, #528]	; (80009c4 <main+0x4f4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	1ad2      	subs	r2, r2, r3
 80007b6:	4b84      	ldr	r3, [pc, #528]	; (80009c8 <main+0x4f8>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	429a      	cmp	r2, r3
 80007bc:	d907      	bls.n	80007ce <main+0x2fe>
			{
				dotFlag = 1;
 80007be:	4b83      	ldr	r3, [pc, #524]	; (80009cc <main+0x4fc>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	801a      	strh	r2, [r3, #0]
				ledBlinksShortPress(dotFlag);
 80007c4:	4b81      	ldr	r3, [pc, #516]	; (80009cc <main+0x4fc>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fb7b 	bl	8000ec4 <ledBlinksShortPress>
			}
			if(dotFlag)
 80007ce:	4b7f      	ldr	r3, [pc, #508]	; (80009cc <main+0x4fc>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	f000 8361 	beq.w	8000e9a <main+0x9ca>
			{
				charAcquire[5] = 1;
 80007d8:	4b77      	ldr	r3, [pc, #476]	; (80009b8 <main+0x4e8>)
 80007da:	2201      	movs	r2, #1
 80007dc:	715a      	strb	r2, [r3, #5]
				dotFlag = 0;
 80007de:	4b7b      	ldr	r3, [pc, #492]	; (80009cc <main+0x4fc>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	801a      	strh	r2, [r3, #0]

				char buf[8] = "E ";
 80007e4:	f242 0345 	movw	r3, #8261	; 0x2045
 80007e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80007ea:	2300      	movs	r3, #0
 80007ec:	63fb      	str	r3, [r7, #60]	; 0x3c
				HAL_UART_Transmit(&huart1,(uint8_t *)buf,strlen(buf),1000);
 80007ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff fce8 	bl	80001c8 <strlen>
 80007f8:	4603      	mov	r3, r0
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000804:	4872      	ldr	r0, [pc, #456]	; (80009d0 <main+0x500>)
 8000806:	f002 f912 	bl	8002a2e <HAL_UART_Transmit>
			if(dotFlag)
 800080a:	e346      	b.n	8000e9a <main+0x9ca>
			}
	  }

	  //record three long press [O]
	  else if(charAcquire[5] && !charAcquire[6])
 800080c:	4b6a      	ldr	r3, [pc, #424]	; (80009b8 <main+0x4e8>)
 800080e:	795b      	ldrb	r3, [r3, #5]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d048      	beq.n	80008a6 <main+0x3d6>
 8000814:	4b68      	ldr	r3, [pc, #416]	; (80009b8 <main+0x4e8>)
 8000816:	799b      	ldrb	r3, [r3, #6]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d144      	bne.n	80008a6 <main+0x3d6>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > longPressTime)
 800081c:	4b67      	ldr	r3, [pc, #412]	; (80009bc <main+0x4ec>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d022      	beq.n	800086a <main+0x39a>
 8000824:	2101      	movs	r1, #1
 8000826:	4866      	ldr	r0, [pc, #408]	; (80009c0 <main+0x4f0>)
 8000828:	f001 f8fc 	bl	8001a24 <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d01b      	beq.n	800086a <main+0x39a>
 8000832:	f000 fe49 	bl	80014c8 <HAL_GetTick>
 8000836:	4602      	mov	r2, r0
 8000838:	4b62      	ldr	r3, [pc, #392]	; (80009c4 <main+0x4f4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	1ad2      	subs	r2, r2, r3
 800083e:	4b65      	ldr	r3, [pc, #404]	; (80009d4 <main+0x504>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	429a      	cmp	r2, r3
 8000844:	d911      	bls.n	800086a <main+0x39a>
			{
				dashFlag++;
 8000846:	4b64      	ldr	r3, [pc, #400]	; (80009d8 <main+0x508>)
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	b29a      	uxth	r2, r3
 800084e:	4b62      	ldr	r3, [pc, #392]	; (80009d8 <main+0x508>)
 8000850:	801a      	strh	r2, [r3, #0]
				if(dashFlag == 3)
 8000852:	4b61      	ldr	r3, [pc, #388]	; (80009d8 <main+0x508>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	2b03      	cmp	r3, #3
 8000858:	d104      	bne.n	8000864 <main+0x394>
					ledBlinksLongPress(dashFlag);
 800085a:	4b5f      	ldr	r3, [pc, #380]	; (80009d8 <main+0x508>)
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fb58 	bl	8000f14 <ledBlinksLongPress>

				buttonPressed = 0;
 8000864:	4b55      	ldr	r3, [pc, #340]	; (80009bc <main+0x4ec>)
 8000866:	2200      	movs	r2, #0
 8000868:	701a      	strb	r2, [r3, #0]
			}

			if(dashFlag == 3)
 800086a:	4b5b      	ldr	r3, [pc, #364]	; (80009d8 <main+0x508>)
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	2b03      	cmp	r3, #3
 8000870:	f040 8313 	bne.w	8000e9a <main+0x9ca>
			{
				charAcquire[6] = 1;
 8000874:	4b50      	ldr	r3, [pc, #320]	; (80009b8 <main+0x4e8>)
 8000876:	2201      	movs	r2, #1
 8000878:	719a      	strb	r2, [r3, #6]
				dashFlag = 0;
 800087a:	4b57      	ldr	r3, [pc, #348]	; (80009d8 <main+0x508>)
 800087c:	2200      	movs	r2, #0
 800087e:	801a      	strh	r2, [r3, #0]

				char buf[8] = "O";
 8000880:	234f      	movs	r3, #79	; 0x4f
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
 8000884:	2300      	movs	r3, #0
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
				HAL_UART_Transmit(&huart1,(uint8_t *)buf,strlen(buf),1000);
 8000888:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fc9b 	bl	80001c8 <strlen>
 8000892:	4603      	mov	r3, r0
 8000894:	b29a      	uxth	r2, r3
 8000896:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800089a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089e:	484c      	ldr	r0, [pc, #304]	; (80009d0 <main+0x500>)
 80008a0:	f002 f8c5 	bl	8002a2e <HAL_UART_Transmit>
			if(dashFlag == 3)
 80008a4:	e2f9      	b.n	8000e9a <main+0x9ca>
			}
	  }

	  //record two long press,two short press [Z]
	  else if(charAcquire[6] && !charAcquire[7])
 80008a6:	4b44      	ldr	r3, [pc, #272]	; (80009b8 <main+0x4e8>)
 80008a8:	799b      	ldrb	r3, [r3, #6]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d036      	beq.n	800091c <main+0x44c>
 80008ae:	4b42      	ldr	r3, [pc, #264]	; (80009b8 <main+0x4e8>)
 80008b0:	79db      	ldrb	r3, [r3, #7]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d132      	bne.n	800091c <main+0x44c>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > longPressTime)
 80008b6:	4b41      	ldr	r3, [pc, #260]	; (80009bc <main+0x4ec>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d022      	beq.n	8000904 <main+0x434>
 80008be:	2101      	movs	r1, #1
 80008c0:	483f      	ldr	r0, [pc, #252]	; (80009c0 <main+0x4f0>)
 80008c2:	f001 f8af 	bl	8001a24 <HAL_GPIO_ReadPin>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d01b      	beq.n	8000904 <main+0x434>
 80008cc:	f000 fdfc 	bl	80014c8 <HAL_GetTick>
 80008d0:	4602      	mov	r2, r0
 80008d2:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <main+0x4f4>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	1ad2      	subs	r2, r2, r3
 80008d8:	4b3e      	ldr	r3, [pc, #248]	; (80009d4 <main+0x504>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	429a      	cmp	r2, r3
 80008de:	d911      	bls.n	8000904 <main+0x434>
			{
				dashFlag++;
 80008e0:	4b3d      	ldr	r3, [pc, #244]	; (80009d8 <main+0x508>)
 80008e2:	881b      	ldrh	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b29a      	uxth	r2, r3
 80008e8:	4b3b      	ldr	r3, [pc, #236]	; (80009d8 <main+0x508>)
 80008ea:	801a      	strh	r2, [r3, #0]
				if(dashFlag == 2)
 80008ec:	4b3a      	ldr	r3, [pc, #232]	; (80009d8 <main+0x508>)
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d104      	bne.n	80008fe <main+0x42e>
					ledBlinksLongPress(dashFlag);
 80008f4:	4b38      	ldr	r3, [pc, #224]	; (80009d8 <main+0x508>)
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fb0b 	bl	8000f14 <ledBlinksLongPress>

				buttonPressed = 0;
 80008fe:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <main+0x4ec>)
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
			}

			if(dashFlag == 2)
 8000904:	4b34      	ldr	r3, [pc, #208]	; (80009d8 <main+0x508>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	2b02      	cmp	r3, #2
 800090a:	f040 82c6 	bne.w	8000e9a <main+0x9ca>
			{
				charAcquire[7] = 1;
 800090e:	4b2a      	ldr	r3, [pc, #168]	; (80009b8 <main+0x4e8>)
 8000910:	2201      	movs	r2, #1
 8000912:	71da      	strb	r2, [r3, #7]
				dashFlag = 0;
 8000914:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <main+0x508>)
 8000916:	2200      	movs	r2, #0
 8000918:	801a      	strh	r2, [r3, #0]
			if(dashFlag == 2)
 800091a:	e2be      	b.n	8000e9a <main+0x9ca>
			}
	  }

	  else if(charAcquire[7] && !charAcquire[8])
 800091c:	4b26      	ldr	r3, [pc, #152]	; (80009b8 <main+0x4e8>)
 800091e:	79db      	ldrb	r3, [r3, #7]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d05b      	beq.n	80009dc <main+0x50c>
 8000924:	4b24      	ldr	r3, [pc, #144]	; (80009b8 <main+0x4e8>)
 8000926:	7a1b      	ldrb	r3, [r3, #8]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d157      	bne.n	80009dc <main+0x50c>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > shortPressTime)
 800092c:	4b23      	ldr	r3, [pc, #140]	; (80009bc <main+0x4ec>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d022      	beq.n	800097a <main+0x4aa>
 8000934:	2101      	movs	r1, #1
 8000936:	4822      	ldr	r0, [pc, #136]	; (80009c0 <main+0x4f0>)
 8000938:	f001 f874 	bl	8001a24 <HAL_GPIO_ReadPin>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d01b      	beq.n	800097a <main+0x4aa>
 8000942:	f000 fdc1 	bl	80014c8 <HAL_GetTick>
 8000946:	4602      	mov	r2, r0
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <main+0x4f4>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	1ad2      	subs	r2, r2, r3
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <main+0x4f8>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	429a      	cmp	r2, r3
 8000954:	d911      	bls.n	800097a <main+0x4aa>
			{
				dotFlag++;
 8000956:	4b1d      	ldr	r3, [pc, #116]	; (80009cc <main+0x4fc>)
 8000958:	881b      	ldrh	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <main+0x4fc>)
 8000960:	801a      	strh	r2, [r3, #0]
				if(dotFlag == 2)
 8000962:	4b1a      	ldr	r3, [pc, #104]	; (80009cc <main+0x4fc>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	2b02      	cmp	r3, #2
 8000968:	d104      	bne.n	8000974 <main+0x4a4>
					ledBlinksShortPress(dotFlag);
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <main+0x4fc>)
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f000 faa8 	bl	8000ec4 <ledBlinksShortPress>

				buttonPressed = 0;
 8000974:	4b11      	ldr	r3, [pc, #68]	; (80009bc <main+0x4ec>)
 8000976:	2200      	movs	r2, #0
 8000978:	701a      	strb	r2, [r3, #0]
			}
			if(dotFlag ==2)
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <main+0x4fc>)
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	2b02      	cmp	r3, #2
 8000980:	f040 828b 	bne.w	8000e9a <main+0x9ca>
			{
				charAcquire[8] = 1;
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <main+0x4e8>)
 8000986:	2201      	movs	r2, #1
 8000988:	721a      	strb	r2, [r3, #8]
				dotFlag = 0;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <main+0x4fc>)
 800098c:	2200      	movs	r2, #0
 800098e:	801a      	strh	r2, [r3, #0]

				char buf[8] = "Z";
 8000990:	235a      	movs	r3, #90	; 0x5a
 8000992:	62bb      	str	r3, [r7, #40]	; 0x28
 8000994:	2300      	movs	r3, #0
 8000996:	62fb      	str	r3, [r7, #44]	; 0x2c
				HAL_UART_Transmit(&huart1,(uint8_t *)buf,strlen(buf),1000);
 8000998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fc13 	bl	80001c8 <strlen>
 80009a2:	4603      	mov	r3, r0
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80009aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009ae:	4808      	ldr	r0, [pc, #32]	; (80009d0 <main+0x500>)
 80009b0:	f002 f83d 	bl	8002a2e <HAL_UART_Transmit>
			if(dotFlag ==2)
 80009b4:	e271      	b.n	8000e9a <main+0x9ca>
 80009b6:	bf00      	nop
 80009b8:	2000003c 	.word	0x2000003c
 80009bc:	20000034 	.word	0x20000034
 80009c0:	40020000 	.word	0x40020000
 80009c4:	20000030 	.word	0x20000030
 80009c8:	20000004 	.word	0x20000004
 80009cc:	20000036 	.word	0x20000036
 80009d0:	20000054 	.word	0x20000054
 80009d4:	20000000 	.word	0x20000000
 80009d8:	20000038 	.word	0x20000038
			}
	  }

	  //record a long press [T]
	  else if(charAcquire[8] && !charAcquire[9])
 80009dc:	4b8b      	ldr	r3, [pc, #556]	; (8000c0c <main+0x73c>)
 80009de:	7a1b      	ldrb	r3, [r3, #8]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d048      	beq.n	8000a76 <main+0x5a6>
 80009e4:	4b89      	ldr	r3, [pc, #548]	; (8000c0c <main+0x73c>)
 80009e6:	7a5b      	ldrb	r3, [r3, #9]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d144      	bne.n	8000a76 <main+0x5a6>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > longPressTime)
 80009ec:	4b88      	ldr	r3, [pc, #544]	; (8000c10 <main+0x740>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d022      	beq.n	8000a3a <main+0x56a>
 80009f4:	2101      	movs	r1, #1
 80009f6:	4887      	ldr	r0, [pc, #540]	; (8000c14 <main+0x744>)
 80009f8:	f001 f814 	bl	8001a24 <HAL_GPIO_ReadPin>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d01b      	beq.n	8000a3a <main+0x56a>
 8000a02:	f000 fd61 	bl	80014c8 <HAL_GetTick>
 8000a06:	4602      	mov	r2, r0
 8000a08:	4b83      	ldr	r3, [pc, #524]	; (8000c18 <main+0x748>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	1ad2      	subs	r2, r2, r3
 8000a0e:	4b83      	ldr	r3, [pc, #524]	; (8000c1c <main+0x74c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d911      	bls.n	8000a3a <main+0x56a>
			{
				dashFlag++;
 8000a16:	4b82      	ldr	r3, [pc, #520]	; (8000c20 <main+0x750>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	4b80      	ldr	r3, [pc, #512]	; (8000c20 <main+0x750>)
 8000a20:	801a      	strh	r2, [r3, #0]
				if(dashFlag == 1)
 8000a22:	4b7f      	ldr	r3, [pc, #508]	; (8000c20 <main+0x750>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d104      	bne.n	8000a34 <main+0x564>
					ledBlinksLongPress(dashFlag);
 8000a2a:	4b7d      	ldr	r3, [pc, #500]	; (8000c20 <main+0x750>)
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fa70 	bl	8000f14 <ledBlinksLongPress>

				buttonPressed = 0;
 8000a34:	4b76      	ldr	r3, [pc, #472]	; (8000c10 <main+0x740>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
			}

			if(dashFlag)
 8000a3a:	4b79      	ldr	r3, [pc, #484]	; (8000c20 <main+0x750>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f000 822b 	beq.w	8000e9a <main+0x9ca>
			{
				charAcquire[9] = 1;
 8000a44:	4b71      	ldr	r3, [pc, #452]	; (8000c0c <main+0x73c>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	725a      	strb	r2, [r3, #9]
				dashFlag = 0;
 8000a4a:	4b75      	ldr	r3, [pc, #468]	; (8000c20 <main+0x750>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	801a      	strh	r2, [r3, #0]

				char buf[8] = "T";
 8000a50:	2354      	movs	r3, #84	; 0x54
 8000a52:	623b      	str	r3, [r7, #32]
 8000a54:	2300      	movs	r3, #0
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
				HAL_UART_Transmit(&huart1,(uint8_t *)buf,strlen(buf),1000);
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fbb3 	bl	80001c8 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	f107 0120 	add.w	r1, r7, #32
 8000a6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6e:	486d      	ldr	r0, [pc, #436]	; (8000c24 <main+0x754>)
 8000a70:	f001 ffdd 	bl	8002a2e <HAL_UART_Transmit>
			if(dashFlag)
 8000a74:	e211      	b.n	8000e9a <main+0x9ca>
			}
	  }

	  //record two short press, one long press [U]
	  else if(charAcquire[9] && !charAcquire[10])
 8000a76:	4b65      	ldr	r3, [pc, #404]	; (8000c0c <main+0x73c>)
 8000a78:	7a5b      	ldrb	r3, [r3, #9]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d048      	beq.n	8000b10 <main+0x640>
 8000a7e:	4b63      	ldr	r3, [pc, #396]	; (8000c0c <main+0x73c>)
 8000a80:	7a9b      	ldrb	r3, [r3, #10]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d144      	bne.n	8000b10 <main+0x640>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > shortPressTime)
 8000a86:	4b62      	ldr	r3, [pc, #392]	; (8000c10 <main+0x740>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d022      	beq.n	8000ad4 <main+0x604>
 8000a8e:	2101      	movs	r1, #1
 8000a90:	4860      	ldr	r0, [pc, #384]	; (8000c14 <main+0x744>)
 8000a92:	f000 ffc7 	bl	8001a24 <HAL_GPIO_ReadPin>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d01b      	beq.n	8000ad4 <main+0x604>
 8000a9c:	f000 fd14 	bl	80014c8 <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	4b5d      	ldr	r3, [pc, #372]	; (8000c18 <main+0x748>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	1ad2      	subs	r2, r2, r3
 8000aa8:	4b5f      	ldr	r3, [pc, #380]	; (8000c28 <main+0x758>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	d911      	bls.n	8000ad4 <main+0x604>
			{
				dotFlag++;
 8000ab0:	4b5e      	ldr	r3, [pc, #376]	; (8000c2c <main+0x75c>)
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	4b5c      	ldr	r3, [pc, #368]	; (8000c2c <main+0x75c>)
 8000aba:	801a      	strh	r2, [r3, #0]
				if(dotFlag == 2)
 8000abc:	4b5b      	ldr	r3, [pc, #364]	; (8000c2c <main+0x75c>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d104      	bne.n	8000ace <main+0x5fe>
					ledBlinksShortPress(dotFlag);
 8000ac4:	4b59      	ldr	r3, [pc, #356]	; (8000c2c <main+0x75c>)
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 f9fb 	bl	8000ec4 <ledBlinksShortPress>

				buttonPressed = 0;
 8000ace:	4b50      	ldr	r3, [pc, #320]	; (8000c10 <main+0x740>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
			}
			if(dotFlag ==2)
 8000ad4:	4b55      	ldr	r3, [pc, #340]	; (8000c2c <main+0x75c>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	f040 81de 	bne.w	8000e9a <main+0x9ca>
			{
				charAcquire[10] = 1;
 8000ade:	4b4b      	ldr	r3, [pc, #300]	; (8000c0c <main+0x73c>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	729a      	strb	r2, [r3, #10]
				dotFlag = 0;
 8000ae4:	4b51      	ldr	r3, [pc, #324]	; (8000c2c <main+0x75c>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	801a      	strh	r2, [r3, #0]

				char buf[8] = "U";
 8000aea:	2355      	movs	r3, #85	; 0x55
 8000aec:	61bb      	str	r3, [r7, #24]
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
				HAL_UART_Transmit(&huart1,(uint8_t *)buf,strlen(buf),1000);
 8000af2:	f107 0318 	add.w	r3, r7, #24
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fb66 	bl	80001c8 <strlen>
 8000afc:	4603      	mov	r3, r0
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	f107 0118 	add.w	r1, r7, #24
 8000b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b08:	4846      	ldr	r0, [pc, #280]	; (8000c24 <main+0x754>)
 8000b0a:	f001 ff90 	bl	8002a2e <HAL_UART_Transmit>
			if(dotFlag ==2)
 8000b0e:	e1c4      	b.n	8000e9a <main+0x9ca>
			}
	  }

	  else if(charAcquire[10] && !charAcquire[11])
 8000b10:	4b3e      	ldr	r3, [pc, #248]	; (8000c0c <main+0x73c>)
 8000b12:	7a9b      	ldrb	r3, [r3, #10]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d048      	beq.n	8000baa <main+0x6da>
 8000b18:	4b3c      	ldr	r3, [pc, #240]	; (8000c0c <main+0x73c>)
 8000b1a:	7adb      	ldrb	r3, [r3, #11]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d144      	bne.n	8000baa <main+0x6da>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > longPressTime)
 8000b20:	4b3b      	ldr	r3, [pc, #236]	; (8000c10 <main+0x740>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d022      	beq.n	8000b6e <main+0x69e>
 8000b28:	2101      	movs	r1, #1
 8000b2a:	483a      	ldr	r0, [pc, #232]	; (8000c14 <main+0x744>)
 8000b2c:	f000 ff7a 	bl	8001a24 <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d01b      	beq.n	8000b6e <main+0x69e>
 8000b36:	f000 fcc7 	bl	80014c8 <HAL_GetTick>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	4b36      	ldr	r3, [pc, #216]	; (8000c18 <main+0x748>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	1ad2      	subs	r2, r2, r3
 8000b42:	4b36      	ldr	r3, [pc, #216]	; (8000c1c <main+0x74c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d911      	bls.n	8000b6e <main+0x69e>
			{
				dashFlag++;
 8000b4a:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <main+0x750>)
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	4b33      	ldr	r3, [pc, #204]	; (8000c20 <main+0x750>)
 8000b54:	801a      	strh	r2, [r3, #0]
				if(dashFlag == 1)
 8000b56:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <main+0x750>)
 8000b58:	881b      	ldrh	r3, [r3, #0]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d104      	bne.n	8000b68 <main+0x698>
					ledBlinksLongPress(dashFlag);
 8000b5e:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <main+0x750>)
 8000b60:	881b      	ldrh	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f9d6 	bl	8000f14 <ledBlinksLongPress>

				buttonPressed = 0;
 8000b68:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <main+0x740>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
			}

			if(dashFlag)
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <main+0x750>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	f000 8191 	beq.w	8000e9a <main+0x9ca>
			{
				charAcquire[11] = 1;
 8000b78:	4b24      	ldr	r3, [pc, #144]	; (8000c0c <main+0x73c>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	72da      	strb	r2, [r3, #11]
				dashFlag = 0;
 8000b7e:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <main+0x750>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	801a      	strh	r2, [r3, #0]

				char buf[8] = "R";
 8000b84:	2352      	movs	r3, #82	; 0x52
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
				HAL_UART_Transmit(&huart1,(uint8_t *)buf,strlen(buf),1000);
 8000b8c:	f107 0310 	add.w	r3, r7, #16
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fb19 	bl	80001c8 <strlen>
 8000b96:	4603      	mov	r3, r0
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	f107 0110 	add.w	r1, r7, #16
 8000b9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba2:	4820      	ldr	r0, [pc, #128]	; (8000c24 <main+0x754>)
 8000ba4:	f001 ff43 	bl	8002a2e <HAL_UART_Transmit>
			if(dashFlag)
 8000ba8:	e177      	b.n	8000e9a <main+0x9ca>
			}
	  }

	  // record one short press, one long press, one short press [R]
	  else if(charAcquire[11] && !charAcquire[12])
 8000baa:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <main+0x73c>)
 8000bac:	7adb      	ldrb	r3, [r3, #11]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d03e      	beq.n	8000c30 <main+0x760>
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <main+0x73c>)
 8000bb4:	7b1b      	ldrb	r3, [r3, #12]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d13a      	bne.n	8000c30 <main+0x760>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > shortPressTime)
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <main+0x740>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d018      	beq.n	8000bf4 <main+0x724>
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	4813      	ldr	r0, [pc, #76]	; (8000c14 <main+0x744>)
 8000bc6:	f000 ff2d 	bl	8001a24 <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d011      	beq.n	8000bf4 <main+0x724>
 8000bd0:	f000 fc7a 	bl	80014c8 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <main+0x748>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	1ad2      	subs	r2, r2, r3
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <main+0x758>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d907      	bls.n	8000bf4 <main+0x724>
			{
				dotFlag = 1;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <main+0x75c>)
 8000be6:	2201      	movs	r2, #1
 8000be8:	801a      	strh	r2, [r3, #0]
				ledBlinksShortPress(dotFlag);
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <main+0x75c>)
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f968 	bl	8000ec4 <ledBlinksShortPress>
			}
			if(dotFlag)
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <main+0x75c>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f000 814e 	beq.w	8000e9a <main+0x9ca>
			{
				charAcquire[12] = 1;
 8000bfe:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <main+0x73c>)
 8000c00:	2201      	movs	r2, #1
 8000c02:	731a      	strb	r2, [r3, #12]
				dotFlag = 0;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <main+0x75c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	801a      	strh	r2, [r3, #0]
			if(dotFlag)
 8000c0a:	e146      	b.n	8000e9a <main+0x9ca>
 8000c0c:	2000003c 	.word	0x2000003c
 8000c10:	20000034 	.word	0x20000034
 8000c14:	40020000 	.word	0x40020000
 8000c18:	20000030 	.word	0x20000030
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000038 	.word	0x20000038
 8000c24:	20000054 	.word	0x20000054
 8000c28:	20000004 	.word	0x20000004
 8000c2c:	20000036 	.word	0x20000036
			}
	  }

	  else if(charAcquire[12] && !charAcquire[13])
 8000c30:	4b9b      	ldr	r3, [pc, #620]	; (8000ea0 <main+0x9d0>)
 8000c32:	7b1b      	ldrb	r3, [r3, #12]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d036      	beq.n	8000ca6 <main+0x7d6>
 8000c38:	4b99      	ldr	r3, [pc, #612]	; (8000ea0 <main+0x9d0>)
 8000c3a:	7b5b      	ldrb	r3, [r3, #13]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d132      	bne.n	8000ca6 <main+0x7d6>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > longPressTime)
 8000c40:	4b98      	ldr	r3, [pc, #608]	; (8000ea4 <main+0x9d4>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d022      	beq.n	8000c8e <main+0x7be>
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4897      	ldr	r0, [pc, #604]	; (8000ea8 <main+0x9d8>)
 8000c4c:	f000 feea 	bl	8001a24 <HAL_GPIO_ReadPin>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d01b      	beq.n	8000c8e <main+0x7be>
 8000c56:	f000 fc37 	bl	80014c8 <HAL_GetTick>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	4b93      	ldr	r3, [pc, #588]	; (8000eac <main+0x9dc>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	1ad2      	subs	r2, r2, r3
 8000c62:	4b93      	ldr	r3, [pc, #588]	; (8000eb0 <main+0x9e0>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d911      	bls.n	8000c8e <main+0x7be>
			{
				dashFlag++;
 8000c6a:	4b92      	ldr	r3, [pc, #584]	; (8000eb4 <main+0x9e4>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	4b90      	ldr	r3, [pc, #576]	; (8000eb4 <main+0x9e4>)
 8000c74:	801a      	strh	r2, [r3, #0]
				if(dashFlag == 1)
 8000c76:	4b8f      	ldr	r3, [pc, #572]	; (8000eb4 <main+0x9e4>)
 8000c78:	881b      	ldrh	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d104      	bne.n	8000c88 <main+0x7b8>
					ledBlinksLongPress(dashFlag);
 8000c7e:	4b8d      	ldr	r3, [pc, #564]	; (8000eb4 <main+0x9e4>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f946 	bl	8000f14 <ledBlinksLongPress>

				buttonPressed = 0;
 8000c88:	4b86      	ldr	r3, [pc, #536]	; (8000ea4 <main+0x9d4>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	701a      	strb	r2, [r3, #0]
			}

			if(dashFlag)
 8000c8e:	4b89      	ldr	r3, [pc, #548]	; (8000eb4 <main+0x9e4>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 8101 	beq.w	8000e9a <main+0x9ca>
			{
				charAcquire[13] = 1;
 8000c98:	4b81      	ldr	r3, [pc, #516]	; (8000ea0 <main+0x9d0>)
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	735a      	strb	r2, [r3, #13]
				dashFlag = 0;
 8000c9e:	4b85      	ldr	r3, [pc, #532]	; (8000eb4 <main+0x9e4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	801a      	strh	r2, [r3, #0]
			if(dashFlag)
 8000ca4:	e0f9      	b.n	8000e9a <main+0x9ca>
			}
	  }

	  else if(charAcquire[13] && !charAcquire[14])
 8000ca6:	4b7e      	ldr	r3, [pc, #504]	; (8000ea0 <main+0x9d0>)
 8000ca8:	7b5b      	ldrb	r3, [r3, #13]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d03e      	beq.n	8000d2c <main+0x85c>
 8000cae:	4b7c      	ldr	r3, [pc, #496]	; (8000ea0 <main+0x9d0>)
 8000cb0:	7b9b      	ldrb	r3, [r3, #14]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d13a      	bne.n	8000d2c <main+0x85c>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > shortPressTime)
 8000cb6:	4b7b      	ldr	r3, [pc, #492]	; (8000ea4 <main+0x9d4>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d018      	beq.n	8000cf0 <main+0x820>
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4879      	ldr	r0, [pc, #484]	; (8000ea8 <main+0x9d8>)
 8000cc2:	f000 feaf 	bl	8001a24 <HAL_GPIO_ReadPin>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d011      	beq.n	8000cf0 <main+0x820>
 8000ccc:	f000 fbfc 	bl	80014c8 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	4b76      	ldr	r3, [pc, #472]	; (8000eac <main+0x9dc>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	1ad2      	subs	r2, r2, r3
 8000cd8:	4b77      	ldr	r3, [pc, #476]	; (8000eb8 <main+0x9e8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d907      	bls.n	8000cf0 <main+0x820>
			{
				dotFlag = 1;
 8000ce0:	4b76      	ldr	r3, [pc, #472]	; (8000ebc <main+0x9ec>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	801a      	strh	r2, [r3, #0]
				ledBlinksShortPress(dotFlag);
 8000ce6:	4b75      	ldr	r3, [pc, #468]	; (8000ebc <main+0x9ec>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f000 f8ea 	bl	8000ec4 <ledBlinksShortPress>
			}
			if(dotFlag)
 8000cf0:	4b72      	ldr	r3, [pc, #456]	; (8000ebc <main+0x9ec>)
 8000cf2:	881b      	ldrh	r3, [r3, #0]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f000 80d0 	beq.w	8000e9a <main+0x9ca>
			{
				charAcquire[14] = 1;
 8000cfa:	4b69      	ldr	r3, [pc, #420]	; (8000ea0 <main+0x9d0>)
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	739a      	strb	r2, [r3, #14]
				dotFlag = 0;
 8000d00:	4b6e      	ldr	r3, [pc, #440]	; (8000ebc <main+0x9ec>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	801a      	strh	r2, [r3, #0]

				char buf[8] = "R";
 8000d06:	2352      	movs	r3, #82	; 0x52
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
				HAL_UART_Transmit(&huart1,(uint8_t *)buf,strlen(buf),1000);
 8000d0e:	f107 0308 	add.w	r3, r7, #8
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fa58 	bl	80001c8 <strlen>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	f107 0108 	add.w	r1, r7, #8
 8000d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d24:	4866      	ldr	r0, [pc, #408]	; (8000ec0 <main+0x9f0>)
 8000d26:	f001 fe82 	bl	8002a2e <HAL_UART_Transmit>
			if(dotFlag)
 8000d2a:	e0b6      	b.n	8000e9a <main+0x9ca>
			}
	  }

	  //record one long press, one short press, one long press [K]
	  else if(charAcquire[14] && !charAcquire[15])
 8000d2c:	4b5c      	ldr	r3, [pc, #368]	; (8000ea0 <main+0x9d0>)
 8000d2e:	7b9b      	ldrb	r3, [r3, #14]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d036      	beq.n	8000da2 <main+0x8d2>
 8000d34:	4b5a      	ldr	r3, [pc, #360]	; (8000ea0 <main+0x9d0>)
 8000d36:	7bdb      	ldrb	r3, [r3, #15]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d132      	bne.n	8000da2 <main+0x8d2>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > longPressTime)
 8000d3c:	4b59      	ldr	r3, [pc, #356]	; (8000ea4 <main+0x9d4>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d022      	beq.n	8000d8a <main+0x8ba>
 8000d44:	2101      	movs	r1, #1
 8000d46:	4858      	ldr	r0, [pc, #352]	; (8000ea8 <main+0x9d8>)
 8000d48:	f000 fe6c 	bl	8001a24 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d01b      	beq.n	8000d8a <main+0x8ba>
 8000d52:	f000 fbb9 	bl	80014c8 <HAL_GetTick>
 8000d56:	4602      	mov	r2, r0
 8000d58:	4b54      	ldr	r3, [pc, #336]	; (8000eac <main+0x9dc>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	1ad2      	subs	r2, r2, r3
 8000d5e:	4b54      	ldr	r3, [pc, #336]	; (8000eb0 <main+0x9e0>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d911      	bls.n	8000d8a <main+0x8ba>
			{
				dashFlag++;
 8000d66:	4b53      	ldr	r3, [pc, #332]	; (8000eb4 <main+0x9e4>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b51      	ldr	r3, [pc, #324]	; (8000eb4 <main+0x9e4>)
 8000d70:	801a      	strh	r2, [r3, #0]
				if(dashFlag == 1)
 8000d72:	4b50      	ldr	r3, [pc, #320]	; (8000eb4 <main+0x9e4>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d104      	bne.n	8000d84 <main+0x8b4>
					ledBlinksLongPress(dashFlag);
 8000d7a:	4b4e      	ldr	r3, [pc, #312]	; (8000eb4 <main+0x9e4>)
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f8c8 	bl	8000f14 <ledBlinksLongPress>

				buttonPressed = 0;
 8000d84:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <main+0x9d4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
			}

			if(dashFlag)
 8000d8a:	4b4a      	ldr	r3, [pc, #296]	; (8000eb4 <main+0x9e4>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	f000 8083 	beq.w	8000e9a <main+0x9ca>
			{
				charAcquire[15] = 1;
 8000d94:	4b42      	ldr	r3, [pc, #264]	; (8000ea0 <main+0x9d0>)
 8000d96:	2201      	movs	r2, #1
 8000d98:	73da      	strb	r2, [r3, #15]
				dashFlag = 0;
 8000d9a:	4b46      	ldr	r3, [pc, #280]	; (8000eb4 <main+0x9e4>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	801a      	strh	r2, [r3, #0]
			if(dashFlag)
 8000da0:	e07b      	b.n	8000e9a <main+0x9ca>
			}
	  }

	  else if(charAcquire[15] && !charAcquire[16])
 8000da2:	4b3f      	ldr	r3, [pc, #252]	; (8000ea0 <main+0x9d0>)
 8000da4:	7bdb      	ldrb	r3, [r3, #15]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d02b      	beq.n	8000e02 <main+0x932>
 8000daa:	4b3d      	ldr	r3, [pc, #244]	; (8000ea0 <main+0x9d0>)
 8000dac:	7c1b      	ldrb	r3, [r3, #16]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d127      	bne.n	8000e02 <main+0x932>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > shortPressTime)
 8000db2:	4b3c      	ldr	r3, [pc, #240]	; (8000ea4 <main+0x9d4>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d018      	beq.n	8000dec <main+0x91c>
 8000dba:	2101      	movs	r1, #1
 8000dbc:	483a      	ldr	r0, [pc, #232]	; (8000ea8 <main+0x9d8>)
 8000dbe:	f000 fe31 	bl	8001a24 <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d011      	beq.n	8000dec <main+0x91c>
 8000dc8:	f000 fb7e 	bl	80014c8 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <main+0x9dc>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	1ad2      	subs	r2, r2, r3
 8000dd4:	4b38      	ldr	r3, [pc, #224]	; (8000eb8 <main+0x9e8>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d907      	bls.n	8000dec <main+0x91c>
			{
				dotFlag = 1;
 8000ddc:	4b37      	ldr	r3, [pc, #220]	; (8000ebc <main+0x9ec>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	801a      	strh	r2, [r3, #0]
				ledBlinksShortPress(dotFlag);
 8000de2:	4b36      	ldr	r3, [pc, #216]	; (8000ebc <main+0x9ec>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f86c 	bl	8000ec4 <ledBlinksShortPress>
			}
			if(dotFlag)
 8000dec:	4b33      	ldr	r3, [pc, #204]	; (8000ebc <main+0x9ec>)
 8000dee:	881b      	ldrh	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d052      	beq.n	8000e9a <main+0x9ca>
			{
				charAcquire[16] = 1;
 8000df4:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <main+0x9d0>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	741a      	strb	r2, [r3, #16]
				dotFlag = 0;
 8000dfa:	4b30      	ldr	r3, [pc, #192]	; (8000ebc <main+0x9ec>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	801a      	strh	r2, [r3, #0]
			if(dotFlag)
 8000e00:	e04b      	b.n	8000e9a <main+0x9ca>
			}
	  }

	  else if(charAcquire[16] && !charAcquire[17])
 8000e02:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <main+0x9d0>)
 8000e04:	7c1b      	ldrb	r3, [r3, #16]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	f43f ab6d 	beq.w	80004e6 <main+0x16>
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <main+0x9d0>)
 8000e0e:	7c5b      	ldrb	r3, [r3, #17]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	f47f ab68 	bne.w	80004e6 <main+0x16>
	  {
			if(buttonPressed && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0) && (HAL_GetTick() - lastDebounceTime) > longPressTime)
 8000e16:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <main+0x9d4>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d022      	beq.n	8000e64 <main+0x994>
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4821      	ldr	r0, [pc, #132]	; (8000ea8 <main+0x9d8>)
 8000e22:	f000 fdff 	bl	8001a24 <HAL_GPIO_ReadPin>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d01b      	beq.n	8000e64 <main+0x994>
 8000e2c:	f000 fb4c 	bl	80014c8 <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <main+0x9dc>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	1ad2      	subs	r2, r2, r3
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <main+0x9e0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d911      	bls.n	8000e64 <main+0x994>
			{
				dashFlag++;
 8000e40:	4b1c      	ldr	r3, [pc, #112]	; (8000eb4 <main+0x9e4>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	b29a      	uxth	r2, r3
 8000e48:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <main+0x9e4>)
 8000e4a:	801a      	strh	r2, [r3, #0]
				if(dashFlag == 1)
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <main+0x9e4>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d104      	bne.n	8000e5e <main+0x98e>
					ledBlinksLongPress(dashFlag);
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <main+0x9e4>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f85b 	bl	8000f14 <ledBlinksLongPress>

				buttonPressed = 0;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <main+0x9d4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
			}

			if(dashFlag)
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <main+0x9e4>)
 8000e66:	881b      	ldrh	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f43f ab3c 	beq.w	80004e6 <main+0x16>
			{
				charAcquire[17] = 1;
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <main+0x9d0>)
 8000e70:	2201      	movs	r2, #1
 8000e72:	745a      	strb	r2, [r3, #17]
				dashFlag = 0;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <main+0x9e4>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	801a      	strh	r2, [r3, #0]

				char buf[8] = "K";
 8000e7a:	234b      	movs	r3, #75	; 0x4b
 8000e7c:	603b      	str	r3, [r7, #0]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
				HAL_UART_Transmit(&huart1,(uint8_t *)buf,strlen(buf),1000);
 8000e82:	463b      	mov	r3, r7
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff f99f 	bl	80001c8 <strlen>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	4639      	mov	r1, r7
 8000e90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e94:	480a      	ldr	r0, [pc, #40]	; (8000ec0 <main+0x9f0>)
 8000e96:	f001 fdca 	bl	8002a2e <HAL_UART_Transmit>
	  if(!charAcquire[0])
 8000e9a:	f7ff bb24 	b.w	80004e6 <main+0x16>
 8000e9e:	bf00      	nop
 8000ea0:	2000003c 	.word	0x2000003c
 8000ea4:	20000034 	.word	0x20000034
 8000ea8:	40020000 	.word	0x40020000
 8000eac:	20000030 	.word	0x20000030
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000038 	.word	0x20000038
 8000eb8:	20000004 	.word	0x20000004
 8000ebc:	20000036 	.word	0x20000036
 8000ec0:	20000054 	.word	0x20000054

08000ec4 <ledBlinksShortPress>:
  }

}

void ledBlinksShortPress(uint16_t numberOfBlinks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < numberOfBlinks; i++)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	e014      	b.n	8000efe <ledBlinksShortPress+0x3a>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000ed4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed8:	480d      	ldr	r0, [pc, #52]	; (8000f10 <ledBlinksShortPress+0x4c>)
 8000eda:	f000 fdd4 	bl	8001a86 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000ede:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ee2:	f000 fafd 	bl	80014e0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000ee6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eea:	4809      	ldr	r0, [pc, #36]	; (8000f10 <ledBlinksShortPress+0x4c>)
 8000eec:	f000 fdcb 	bl	8001a86 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000ef0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ef4:	f000 faf4 	bl	80014e0 <HAL_Delay>
	for(int i = 0; i < numberOfBlinks; i++)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	3301      	adds	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	88fb      	ldrh	r3, [r7, #6]
 8000f00:	68fa      	ldr	r2, [r7, #12]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dbe6      	blt.n	8000ed4 <ledBlinksShortPress+0x10>
	}
}
 8000f06:	bf00      	nop
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40020c00 	.word	0x40020c00

08000f14 <ledBlinksLongPress>:

void ledBlinksLongPress(uint16_t numberOfBlinks)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < numberOfBlinks; i++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	e014      	b.n	8000f4e <ledBlinksLongPress+0x3a>
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000f24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f28:	480d      	ldr	r0, [pc, #52]	; (8000f60 <ledBlinksLongPress+0x4c>)
 8000f2a:	f000 fdac 	bl	8001a86 <HAL_GPIO_TogglePin>
		HAL_Delay(2000);
 8000f2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f32:	f000 fad5 	bl	80014e0 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000f36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f3a:	4809      	ldr	r0, [pc, #36]	; (8000f60 <ledBlinksLongPress+0x4c>)
 8000f3c:	f000 fda3 	bl	8001a86 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 8000f40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f44:	f000 facc 	bl	80014e0 <HAL_Delay>
	for(int i = 0; i < numberOfBlinks; i++)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	429a      	cmp	r2, r3
 8000f54:	dbe6      	blt.n	8000f24 <ledBlinksLongPress+0x10>
	}
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	3710      	adds	r7, #16
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40020c00 	.word	0x40020c00

08000f64 <HAL_GPIO_EXTI_Callback>:

// EXTI Line0 External Interrupt ISR Handler CallBackFun
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	80fb      	strh	r3, [r7, #6]
	lastDebounceTime = HAL_GetTick();  //Get time when interrupt occurs
 8000f6e:	f000 faab 	bl	80014c8 <HAL_GetTick>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_GPIO_EXTI_Callback+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
	buttonPressed = 1;
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <HAL_GPIO_EXTI_Callback+0x28>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000030 	.word	0x20000030
 8000f8c:	20000034 	.word	0x20000034

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	; 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	2230      	movs	r2, #48	; 0x30
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f002 f832 	bl	8003008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	4b28      	ldr	r3, [pc, #160]	; (800105c <SystemClock_Config+0xcc>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	4a27      	ldr	r2, [pc, #156]	; (800105c <SystemClock_Config+0xcc>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc4:	4b25      	ldr	r3, [pc, #148]	; (800105c <SystemClock_Config+0xcc>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <SystemClock_Config+0xd0>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a21      	ldr	r2, [pc, #132]	; (8001060 <SystemClock_Config+0xd0>)
 8000fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <SystemClock_Config+0xd0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fec:	2301      	movs	r3, #1
 8000fee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ffa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001000:	2308      	movs	r3, #8
 8001002:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001004:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001008:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800100a:	2302      	movs	r3, #2
 800100c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800100e:	2307      	movs	r3, #7
 8001010:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001012:	f107 0320 	add.w	r3, r7, #32
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fd68 	bl	8001aec <HAL_RCC_OscConfig>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001022:	f000 f8d3 	bl	80011cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001026:	230f      	movs	r3, #15
 8001028:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800102a:	2302      	movs	r3, #2
 800102c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001032:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001036:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800103c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2105      	movs	r1, #5
 8001044:	4618      	mov	r0, r3
 8001046:	f000 ffc9 	bl	8001fdc <HAL_RCC_ClockConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001050:	f000 f8bc 	bl	80011cc <Error_Handler>
  }
}
 8001054:	bf00      	nop
 8001056:	3750      	adds	r7, #80	; 0x50
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000

08001064 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_USART1_UART_Init+0x4c>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <MX_USART1_UART_Init+0x50>)
 800106c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <MX_USART1_UART_Init+0x4c>)
 8001070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001074:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_USART1_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_USART1_UART_Init+0x4c>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <MX_USART1_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_USART1_UART_Init+0x4c>)
 800108a:	220c      	movs	r2, #12
 800108c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <MX_USART1_UART_Init+0x4c>)
 8001090:	2200      	movs	r2, #0
 8001092:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_USART1_UART_Init+0x4c>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_USART1_UART_Init+0x4c>)
 800109c:	f001 fc7a 	bl	8002994 <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010a6:	f000 f891 	bl	80011cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000054 	.word	0x20000054
 80010b4:	40011000 	.word	0x40011000

080010b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08a      	sub	sp, #40	; 0x28
 80010bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
 80010c6:	605a      	str	r2, [r3, #4]
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	60da      	str	r2, [r3, #12]
 80010cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <MX_GPIO_Init+0xe4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a31      	ldr	r2, [pc, #196]	; (800119c <MX_GPIO_Init+0xe4>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b2f      	ldr	r3, [pc, #188]	; (800119c <MX_GPIO_Init+0xe4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	613b      	str	r3, [r7, #16]
 80010e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	4b2b      	ldr	r3, [pc, #172]	; (800119c <MX_GPIO_Init+0xe4>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a2a      	ldr	r2, [pc, #168]	; (800119c <MX_GPIO_Init+0xe4>)
 80010f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <MX_GPIO_Init+0xe4>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <MX_GPIO_Init+0xe4>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a23      	ldr	r2, [pc, #140]	; (800119c <MX_GPIO_Init+0xe4>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <MX_GPIO_Init+0xe4>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <MX_GPIO_Init+0xe4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <MX_GPIO_Init+0xe4>)
 800112c:	f043 0308 	orr.w	r3, r3, #8
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b1a      	ldr	r3, [pc, #104]	; (800119c <MX_GPIO_Init+0xe4>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001144:	4816      	ldr	r0, [pc, #88]	; (80011a0 <MX_GPIO_Init+0xe8>)
 8001146:	f000 fc85 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800114a:	2301      	movs	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800114e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001154:	2300      	movs	r3, #0
 8001156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4811      	ldr	r0, [pc, #68]	; (80011a4 <MX_GPIO_Init+0xec>)
 8001160:	f000 fac4 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001164:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001176:	f107 0314 	add.w	r3, r7, #20
 800117a:	4619      	mov	r1, r3
 800117c:	4808      	ldr	r0, [pc, #32]	; (80011a0 <MX_GPIO_Init+0xe8>)
 800117e:	f000 fab5 	bl	80016ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2006      	movs	r0, #6
 8001188:	f000 fa86 	bl	8001698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800118c:	2006      	movs	r0, #6
 800118e:	f000 fa9f 	bl	80016d0 <HAL_NVIC_EnableIRQ>

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020c00 	.word	0x40020c00
 80011a4:	40020000 	.word	0x40020000

080011a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d101      	bne.n	80011be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011ba:	f000 f971 	bl	80014a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40010000 	.word	0x40010000

080011cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d0:	b672      	cpsid	i
}
 80011d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <Error_Handler+0x8>
	...

080011d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_MspInit+0x4c>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	4a0f      	ldr	r2, [pc, #60]	; (8001224 <HAL_MspInit+0x4c>)
 80011e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011ec:	6453      	str	r3, [r2, #68]	; 0x44
 80011ee:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_MspInit+0x4c>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_MspInit+0x4c>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001216:	2007      	movs	r0, #7
 8001218:	f000 fa33 	bl	8001682 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800

08001228 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a19      	ldr	r2, [pc, #100]	; (80012ac <HAL_UART_MspInit+0x84>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12c      	bne.n	80012a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_UART_MspInit+0x88>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <HAL_UART_MspInit+0x88>)
 8001254:	f043 0310 	orr.w	r3, r3, #16
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_UART_MspInit+0x88>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_UART_MspInit+0x88>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <HAL_UART_MspInit+0x88>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_UART_MspInit+0x88>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001282:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001294:	2307      	movs	r3, #7
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_UART_MspInit+0x8c>)
 80012a0:	f000 fa24 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40011000 	.word	0x40011000
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000

080012b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08c      	sub	sp, #48	; 0x30
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	2019      	movs	r0, #25
 80012ce:	f000 f9e3 	bl	8001698 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80012d2:	2019      	movs	r0, #25
 80012d4:	f000 f9fc 	bl	80016d0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	4b1f      	ldr	r3, [pc, #124]	; (800135c <HAL_InitTick+0xa4>)
 80012de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e0:	4a1e      	ldr	r2, [pc, #120]	; (800135c <HAL_InitTick+0xa4>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6453      	str	r3, [r2, #68]	; 0x44
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <HAL_InitTick+0xa4>)
 80012ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012f4:	f107 0210 	add.w	r2, r7, #16
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 f868 	bl	80023d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001304:	f001 f852 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
 8001308:	4603      	mov	r3, r0
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	4a13      	ldr	r2, [pc, #76]	; (8001360 <HAL_InitTick+0xa8>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	0c9b      	lsrs	r3, r3, #18
 8001318:	3b01      	subs	r3, #1
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <HAL_InitTick+0xac>)
 800131e:	4a12      	ldr	r2, [pc, #72]	; (8001368 <HAL_InitTick+0xb0>)
 8001320:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_InitTick+0xac>)
 8001324:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001328:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800132a:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <HAL_InitTick+0xac>)
 800132c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <HAL_InitTick+0xac>)
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_InitTick+0xac>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <HAL_InitTick+0xac>)
 800133e:	f001 f87b 	bl	8002438 <HAL_TIM_Base_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d104      	bne.n	8001352 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001348:	4806      	ldr	r0, [pc, #24]	; (8001364 <HAL_InitTick+0xac>)
 800134a:	f001 f8cf 	bl	80024ec <HAL_TIM_Base_Start_IT>
 800134e:	4603      	mov	r3, r0
 8001350:	e000      	b.n	8001354 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3730      	adds	r7, #48	; 0x30
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	431bde83 	.word	0x431bde83
 8001364:	20000098 	.word	0x20000098
 8001368:	40010000 	.word	0x40010000

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <NMI_Handler+0x4>

08001372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <MemManage_Handler+0x4>

0800137e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <UsageFault_Handler+0x4>

0800138a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80013c6:	2001      	movs	r0, #1
 80013c8:	f000 fb78 	bl	8001abc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013d4:	4802      	ldr	r0, [pc, #8]	; (80013e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80013d6:	f001 f8f9 	bl	80025cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000098 	.word	0x20000098

080013e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013e8:	4b06      	ldr	r3, [pc, #24]	; (8001404 <SystemInit+0x20>)
 80013ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <SystemInit+0x20>)
 80013f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001408:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001440 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800140c:	480d      	ldr	r0, [pc, #52]	; (8001444 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800140e:	490e      	ldr	r1, [pc, #56]	; (8001448 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001410:	4a0e      	ldr	r2, [pc, #56]	; (800144c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001412:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001414:	e002      	b.n	800141c <LoopCopyDataInit>

08001416 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001416:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001418:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800141a:	3304      	adds	r3, #4

0800141c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800141c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001420:	d3f9      	bcc.n	8001416 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001422:	4a0b      	ldr	r2, [pc, #44]	; (8001450 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001424:	4c0b      	ldr	r4, [pc, #44]	; (8001454 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001426:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001428:	e001      	b.n	800142e <LoopFillZerobss>

0800142a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800142a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800142c:	3204      	adds	r2, #4

0800142e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001430:	d3fb      	bcc.n	800142a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001432:	f7ff ffd7 	bl	80013e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001436:	f001 fdc3 	bl	8002fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143a:	f7ff f849 	bl	80004d0 <main>
  bx  lr    
 800143e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001440:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001444:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001448:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800144c:	08003058 	.word	0x08003058
  ldr r2, =_sbss
 8001450:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001454:	200000e4 	.word	0x200000e4

08001458 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001458:	e7fe      	b.n	8001458 <ADC_IRQHandler>
	...

0800145c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001460:	4b0e      	ldr	r3, [pc, #56]	; (800149c <HAL_Init+0x40>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a0d      	ldr	r2, [pc, #52]	; (800149c <HAL_Init+0x40>)
 8001466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800146a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_Init+0x40>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0a      	ldr	r2, [pc, #40]	; (800149c <HAL_Init+0x40>)
 8001472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001476:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <HAL_Init+0x40>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a07      	ldr	r2, [pc, #28]	; (800149c <HAL_Init+0x40>)
 800147e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001482:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001484:	2003      	movs	r0, #3
 8001486:	f000 f8fc 	bl	8001682 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff ff14 	bl	80012b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001490:	f7ff fea2 	bl	80011d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023c00 	.word	0x40023c00

080014a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x20>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x24>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4413      	add	r3, r2
 80014b0:	4a04      	ldr	r2, [pc, #16]	; (80014c4 <HAL_IncTick+0x24>)
 80014b2:	6013      	str	r3, [r2, #0]
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000010 	.word	0x20000010
 80014c4:	200000e0 	.word	0x200000e0

080014c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return uwTick;
 80014cc:	4b03      	ldr	r3, [pc, #12]	; (80014dc <HAL_GetTick+0x14>)
 80014ce:	681b      	ldr	r3, [r3, #0]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200000e0 	.word	0x200000e0

080014e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014e8:	f7ff ffee 	bl	80014c8 <HAL_GetTick>
 80014ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f8:	d005      	beq.n	8001506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_Delay+0x44>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	4413      	add	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001506:	bf00      	nop
 8001508:	f7ff ffde 	bl	80014c8 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	429a      	cmp	r2, r3
 8001516:	d8f7      	bhi.n	8001508 <HAL_Delay+0x28>
  {
  }
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	3710      	adds	r7, #16
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000010 	.word	0x20000010

08001528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f003 0307 	and.w	r3, r3, #7
 8001536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001544:	4013      	ands	r3, r2
 8001546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155a:	4a04      	ldr	r2, [pc, #16]	; (800156c <__NVIC_SetPriorityGrouping+0x44>)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	60d3      	str	r3, [r2, #12]
}
 8001560:	bf00      	nop
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <__NVIC_GetPriorityGrouping+0x18>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	0a1b      	lsrs	r3, r3, #8
 800157a:	f003 0307 	and.w	r3, r3, #7
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000ed00 	.word	0xe000ed00

0800158c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	db0b      	blt.n	80015b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	f003 021f 	and.w	r2, r3, #31
 80015a4:	4907      	ldr	r1, [pc, #28]	; (80015c4 <__NVIC_EnableIRQ+0x38>)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	2001      	movs	r0, #1
 80015ae:	fa00 f202 	lsl.w	r2, r0, r2
 80015b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	e000e100 	.word	0xe000e100

080015c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	6039      	str	r1, [r7, #0]
 80015d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	db0a      	blt.n	80015f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	490c      	ldr	r1, [pc, #48]	; (8001614 <__NVIC_SetPriority+0x4c>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	0112      	lsls	r2, r2, #4
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	440b      	add	r3, r1
 80015ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f0:	e00a      	b.n	8001608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	4908      	ldr	r1, [pc, #32]	; (8001618 <__NVIC_SetPriority+0x50>)
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	f003 030f 	and.w	r3, r3, #15
 80015fe:	3b04      	subs	r3, #4
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	440b      	add	r3, r1
 8001606:	761a      	strb	r2, [r3, #24]
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	e000e100 	.word	0xe000e100
 8001618:	e000ed00 	.word	0xe000ed00

0800161c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800161c:	b480      	push	{r7}
 800161e:	b089      	sub	sp, #36	; 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f1c3 0307 	rsb	r3, r3, #7
 8001636:	2b04      	cmp	r3, #4
 8001638:	bf28      	it	cs
 800163a:	2304      	movcs	r3, #4
 800163c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	3304      	adds	r3, #4
 8001642:	2b06      	cmp	r3, #6
 8001644:	d902      	bls.n	800164c <NVIC_EncodePriority+0x30>
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	3b03      	subs	r3, #3
 800164a:	e000      	b.n	800164e <NVIC_EncodePriority+0x32>
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	fa02 f303 	lsl.w	r3, r2, r3
 800165a:	43da      	mvns	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	401a      	ands	r2, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001664:	f04f 31ff 	mov.w	r1, #4294967295
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	43d9      	mvns	r1, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	4313      	orrs	r3, r2
         );
}
 8001676:	4618      	mov	r0, r3
 8001678:	3724      	adds	r7, #36	; 0x24
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ff4c 	bl	8001528 <__NVIC_SetPriorityGrouping>
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	4603      	mov	r3, r0
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016aa:	f7ff ff61 	bl	8001570 <__NVIC_GetPriorityGrouping>
 80016ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	68b9      	ldr	r1, [r7, #8]
 80016b4:	6978      	ldr	r0, [r7, #20]
 80016b6:	f7ff ffb1 	bl	800161c <NVIC_EncodePriority>
 80016ba:	4602      	mov	r2, r0
 80016bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c0:	4611      	mov	r1, r2
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff80 	bl	80015c8 <__NVIC_SetPriority>
}
 80016c8:	bf00      	nop
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ff54 	bl	800158c <__NVIC_EnableIRQ>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b089      	sub	sp, #36	; 0x24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
 8001706:	e16b      	b.n	80019e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001708:	2201      	movs	r2, #1
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	429a      	cmp	r2, r3
 8001722:	f040 815a 	bne.w	80019da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b01      	cmp	r3, #1
 8001730:	d005      	beq.n	800173e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173a:	2b02      	cmp	r3, #2
 800173c:	d130      	bne.n	80017a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	4013      	ands	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68da      	ldr	r2, [r3, #12]
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001774:	2201      	movs	r2, #1
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	091b      	lsrs	r3, r3, #4
 800178a:	f003 0201 	and.w	r2, r3, #1
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b03      	cmp	r3, #3
 80017aa:	d017      	beq.n	80017dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	2203      	movs	r2, #3
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689a      	ldr	r2, [r3, #8]
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d123      	bne.n	8001830 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	08da      	lsrs	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3208      	adds	r2, #8
 80017f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	220f      	movs	r2, #15
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	08da      	lsrs	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3208      	adds	r2, #8
 800182a:	69b9      	ldr	r1, [r7, #24]
 800182c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	69ba      	ldr	r2, [r7, #24]
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0203 	and.w	r2, r3, #3
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4313      	orrs	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800186c:	2b00      	cmp	r3, #0
 800186e:	f000 80b4 	beq.w	80019da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b60      	ldr	r3, [pc, #384]	; (80019f8 <HAL_GPIO_Init+0x30c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	4a5f      	ldr	r2, [pc, #380]	; (80019f8 <HAL_GPIO_Init+0x30c>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b5d      	ldr	r3, [pc, #372]	; (80019f8 <HAL_GPIO_Init+0x30c>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800188e:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <HAL_GPIO_Init+0x310>)
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3302      	adds	r3, #2
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	220f      	movs	r2, #15
 80018a6:	fa02 f303 	lsl.w	r3, r2, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a52      	ldr	r2, [pc, #328]	; (8001a00 <HAL_GPIO_Init+0x314>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d02b      	beq.n	8001912 <HAL_GPIO_Init+0x226>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a51      	ldr	r2, [pc, #324]	; (8001a04 <HAL_GPIO_Init+0x318>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d025      	beq.n	800190e <HAL_GPIO_Init+0x222>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a50      	ldr	r2, [pc, #320]	; (8001a08 <HAL_GPIO_Init+0x31c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01f      	beq.n	800190a <HAL_GPIO_Init+0x21e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4f      	ldr	r2, [pc, #316]	; (8001a0c <HAL_GPIO_Init+0x320>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d019      	beq.n	8001906 <HAL_GPIO_Init+0x21a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4e      	ldr	r2, [pc, #312]	; (8001a10 <HAL_GPIO_Init+0x324>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x216>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4d      	ldr	r2, [pc, #308]	; (8001a14 <HAL_GPIO_Init+0x328>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x212>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4c      	ldr	r2, [pc, #304]	; (8001a18 <HAL_GPIO_Init+0x32c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x20e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4b      	ldr	r2, [pc, #300]	; (8001a1c <HAL_GPIO_Init+0x330>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x20a>
 80018f2:	2307      	movs	r3, #7
 80018f4:	e00e      	b.n	8001914 <HAL_GPIO_Init+0x228>
 80018f6:	2308      	movs	r3, #8
 80018f8:	e00c      	b.n	8001914 <HAL_GPIO_Init+0x228>
 80018fa:	2306      	movs	r3, #6
 80018fc:	e00a      	b.n	8001914 <HAL_GPIO_Init+0x228>
 80018fe:	2305      	movs	r3, #5
 8001900:	e008      	b.n	8001914 <HAL_GPIO_Init+0x228>
 8001902:	2304      	movs	r3, #4
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x228>
 8001906:	2303      	movs	r3, #3
 8001908:	e004      	b.n	8001914 <HAL_GPIO_Init+0x228>
 800190a:	2302      	movs	r3, #2
 800190c:	e002      	b.n	8001914 <HAL_GPIO_Init+0x228>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x228>
 8001912:	2300      	movs	r3, #0
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	f002 0203 	and.w	r2, r2, #3
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4093      	lsls	r3, r2
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001924:	4935      	ldr	r1, [pc, #212]	; (80019fc <HAL_GPIO_Init+0x310>)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001932:	4b3b      	ldr	r3, [pc, #236]	; (8001a20 <HAL_GPIO_Init+0x334>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	43db      	mvns	r3, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4013      	ands	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001956:	4a32      	ldr	r2, [pc, #200]	; (8001a20 <HAL_GPIO_Init+0x334>)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800195c:	4b30      	ldr	r3, [pc, #192]	; (8001a20 <HAL_GPIO_Init+0x334>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	43db      	mvns	r3, r3
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	4013      	ands	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001980:	4a27      	ldr	r2, [pc, #156]	; (8001a20 <HAL_GPIO_Init+0x334>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <HAL_GPIO_Init+0x334>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019aa:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <HAL_GPIO_Init+0x334>)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_GPIO_Init+0x334>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019d4:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <HAL_GPIO_Init+0x334>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3301      	adds	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	2b0f      	cmp	r3, #15
 80019e4:	f67f ae90 	bls.w	8001708 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019e8:	bf00      	nop
 80019ea:	bf00      	nop
 80019ec:	3724      	adds	r7, #36	; 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40013800 	.word	0x40013800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	40020c00 	.word	0x40020c00
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40021400 	.word	0x40021400
 8001a18:	40021800 	.word	0x40021800
 8001a1c:	40021c00 	.word	0x40021c00
 8001a20:	40013c00 	.word	0x40013c00

08001a24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	887b      	ldrh	r3, [r7, #2]
 8001a36:	4013      	ands	r3, r2
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d002      	beq.n	8001a42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	e001      	b.n	8001a46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a42:	2300      	movs	r3, #0
 8001a44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3714      	adds	r7, #20
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
 8001a60:	4613      	mov	r3, r2
 8001a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a64:	787b      	ldrb	r3, [r7, #1]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a70:	e003      	b.n	8001a7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a72:	887b      	ldrh	r3, [r7, #2]
 8001a74:	041a      	lsls	r2, r3, #16
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	619a      	str	r2, [r3, #24]
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b085      	sub	sp, #20
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a98:	887a      	ldrh	r2, [r7, #2]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	041a      	lsls	r2, r3, #16
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	400b      	ands	r3, r1
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ac6:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	4013      	ands	r3, r2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d006      	beq.n	8001ae0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ad8:	88fb      	ldrh	r3, [r7, #6]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fa42 	bl	8000f64 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40013c00 	.word	0x40013c00

08001aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e264      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d075      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0a:	4ba3      	ldr	r3, [pc, #652]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d00c      	beq.n	8001b30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b16:	4ba0      	ldr	r3, [pc, #640]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d112      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b22:	4b9d      	ldr	r3, [pc, #628]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b2e:	d10b      	bne.n	8001b48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b30:	4b99      	ldr	r3, [pc, #612]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d05b      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x108>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d157      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e23f      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b50:	d106      	bne.n	8001b60 <HAL_RCC_OscConfig+0x74>
 8001b52:	4b91      	ldr	r3, [pc, #580]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a90      	ldr	r2, [pc, #576]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b5c:	6013      	str	r3, [r2, #0]
 8001b5e:	e01d      	b.n	8001b9c <HAL_RCC_OscConfig+0xb0>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x98>
 8001b6a:	4b8b      	ldr	r3, [pc, #556]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a8a      	ldr	r2, [pc, #552]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	4b88      	ldr	r3, [pc, #544]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a87      	ldr	r2, [pc, #540]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0xb0>
 8001b84:	4b84      	ldr	r3, [pc, #528]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a83      	ldr	r2, [pc, #524]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b8e:	6013      	str	r3, [r2, #0]
 8001b90:	4b81      	ldr	r3, [pc, #516]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a80      	ldr	r2, [pc, #512]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d013      	beq.n	8001bcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fc90 	bl	80014c8 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fc8c 	bl	80014c8 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	; 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e204      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bbe:	4b76      	ldr	r3, [pc, #472]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0xc0>
 8001bca:	e014      	b.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fc7c 	bl	80014c8 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fc78 	bl	80014c8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e1f0      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be6:	4b6c      	ldr	r3, [pc, #432]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xe8>
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d063      	beq.n	8001cca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c02:	4b65      	ldr	r3, [pc, #404]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00b      	beq.n	8001c26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c0e:	4b62      	ldr	r3, [pc, #392]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d11c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1a:	4b5f      	ldr	r3, [pc, #380]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d116      	bne.n	8001c54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c26:	4b5c      	ldr	r3, [pc, #368]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x152>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e1c4      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3e:	4b56      	ldr	r3, [pc, #344]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4952      	ldr	r1, [pc, #328]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c52:	e03a      	b.n	8001cca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d020      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c5c:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <HAL_RCC_OscConfig+0x2b0>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c62:	f7ff fc31 	bl	80014c8 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fc2d 	bl	80014c8 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1a5      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	4b46      	ldr	r3, [pc, #280]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d0f0      	beq.n	8001c6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b43      	ldr	r3, [pc, #268]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4940      	ldr	r1, [pc, #256]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
 8001c9c:	e015      	b.n	8001cca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	4b3f      	ldr	r3, [pc, #252]	; (8001d9c <HAL_RCC_OscConfig+0x2b0>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fc10 	bl	80014c8 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cac:	f7ff fc0c 	bl	80014c8 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e184      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1f0      	bne.n	8001cac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d030      	beq.n	8001d38 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d016      	beq.n	8001d0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cde:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff fbf0 	bl	80014c8 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff fbec 	bl	80014c8 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e164      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfe:	4b26      	ldr	r3, [pc, #152]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x200>
 8001d0a:	e015      	b.n	8001d38 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0c:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <HAL_RCC_OscConfig+0x2b4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7ff fbd9 	bl	80014c8 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1a:	f7ff fbd5 	bl	80014c8 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e14d      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80a0 	beq.w	8001e86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10f      	bne.n	8001d76 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60bb      	str	r3, [r7, #8]
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	4a0e      	ldr	r2, [pc, #56]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d64:	6413      	str	r3, [r2, #64]	; 0x40
 8001d66:	4b0c      	ldr	r3, [pc, #48]	; (8001d98 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	60bb      	str	r3, [r7, #8]
 8001d70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d72:	2301      	movs	r3, #1
 8001d74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_RCC_OscConfig+0x2b8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d121      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_RCC_OscConfig+0x2b8>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <HAL_RCC_OscConfig+0x2b8>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8e:	f7ff fb9b 	bl	80014c8 <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d94:	e011      	b.n	8001dba <HAL_RCC_OscConfig+0x2ce>
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	42470000 	.word	0x42470000
 8001da0:	42470e80 	.word	0x42470e80
 8001da4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da8:	f7ff fb8e 	bl	80014c8 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e106      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dba:	4b85      	ldr	r3, [pc, #532]	; (8001fd0 <HAL_RCC_OscConfig+0x4e4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d106      	bne.n	8001ddc <HAL_RCC_OscConfig+0x2f0>
 8001dce:	4b81      	ldr	r3, [pc, #516]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd2:	4a80      	ldr	r2, [pc, #512]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dda:	e01c      	b.n	8001e16 <HAL_RCC_OscConfig+0x32a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	d10c      	bne.n	8001dfe <HAL_RCC_OscConfig+0x312>
 8001de4:	4b7b      	ldr	r3, [pc, #492]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de8:	4a7a      	ldr	r2, [pc, #488]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001dea:	f043 0304 	orr.w	r3, r3, #4
 8001dee:	6713      	str	r3, [r2, #112]	; 0x70
 8001df0:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df4:	4a77      	ldr	r2, [pc, #476]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dfc:	e00b      	b.n	8001e16 <HAL_RCC_OscConfig+0x32a>
 8001dfe:	4b75      	ldr	r3, [pc, #468]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e02:	4a74      	ldr	r2, [pc, #464]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0a:	4b72      	ldr	r3, [pc, #456]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e0e:	4a71      	ldr	r2, [pc, #452]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e10:	f023 0304 	bic.w	r3, r3, #4
 8001e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d015      	beq.n	8001e4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1e:	f7ff fb53 	bl	80014c8 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e24:	e00a      	b.n	8001e3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e26:	f7ff fb4f 	bl	80014c8 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e0c5      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3c:	4b65      	ldr	r3, [pc, #404]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0ee      	beq.n	8001e26 <HAL_RCC_OscConfig+0x33a>
 8001e48:	e014      	b.n	8001e74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff fb3d 	bl	80014c8 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e50:	e00a      	b.n	8001e68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e52:	f7ff fb39 	bl	80014c8 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0af      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e68:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1ee      	bne.n	8001e52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d105      	bne.n	8001e86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7a:	4b56      	ldr	r3, [pc, #344]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a55      	ldr	r2, [pc, #340]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 809b 	beq.w	8001fc6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e90:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 030c 	and.w	r3, r3, #12
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d05c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d141      	bne.n	8001f28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea4:	4b4c      	ldr	r3, [pc, #304]	; (8001fd8 <HAL_RCC_OscConfig+0x4ec>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7ff fb0d 	bl	80014c8 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb2:	f7ff fb09 	bl	80014c8 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e081      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec4:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f0      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ede:	019b      	lsls	r3, r3, #6
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee6:	085b      	lsrs	r3, r3, #1
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	041b      	lsls	r3, r3, #16
 8001eec:	431a      	orrs	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	061b      	lsls	r3, r3, #24
 8001ef4:	4937      	ldr	r1, [pc, #220]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efa:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <HAL_RCC_OscConfig+0x4ec>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fae2 	bl	80014c8 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f08:	f7ff fade 	bl	80014c8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e056      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x41c>
 8001f26:	e04e      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f28:	4b2b      	ldr	r3, [pc, #172]	; (8001fd8 <HAL_RCC_OscConfig+0x4ec>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f2e:	f7ff facb 	bl	80014c8 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff fac7 	bl	80014c8 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e03f      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f48:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x44a>
 8001f54:	e037      	b.n	8001fc6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e032      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_RCC_OscConfig+0x4e8>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d028      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d121      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d11a      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f92:	4013      	ands	r3, r2
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f98:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d111      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa8:	085b      	lsrs	r3, r3, #1
 8001faa:	3b01      	subs	r3, #1
 8001fac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d107      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d001      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e000      	b.n	8001fc8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	42470060 	.word	0x42470060

08001fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d101      	bne.n	8001ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0cc      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b68      	ldr	r3, [pc, #416]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d90c      	bls.n	8002018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b65      	ldr	r3, [pc, #404]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b63      	ldr	r3, [pc, #396]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e0b8      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d020      	beq.n	8002066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002030:	4b59      	ldr	r3, [pc, #356]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a58      	ldr	r2, [pc, #352]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800203a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0308 	and.w	r3, r3, #8
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002048:	4b53      	ldr	r3, [pc, #332]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a52      	ldr	r2, [pc, #328]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800204e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002054:	4b50      	ldr	r3, [pc, #320]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	494d      	ldr	r1, [pc, #308]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002062:	4313      	orrs	r3, r2
 8002064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d044      	beq.n	80020fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	4b47      	ldr	r3, [pc, #284]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d119      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e07f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d003      	beq.n	800209a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002096:	2b03      	cmp	r3, #3
 8002098:	d107      	bne.n	80020aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800209a:	4b3f      	ldr	r3, [pc, #252]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d109      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e06f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020aa:	4b3b      	ldr	r3, [pc, #236]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e067      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ba:	4b37      	ldr	r3, [pc, #220]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f023 0203 	bic.w	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	4934      	ldr	r1, [pc, #208]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7ff f9fc 	bl	80014c8 <HAL_GetTick>
 80020d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	e00a      	b.n	80020ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d4:	f7ff f9f8 	bl	80014c8 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e04f      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ea:	4b2b      	ldr	r3, [pc, #172]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 020c 	and.w	r2, r3, #12
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d1eb      	bne.n	80020d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020fc:	4b25      	ldr	r3, [pc, #148]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d20c      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210a:	4b22      	ldr	r3, [pc, #136]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	b2d2      	uxtb	r2, r2
 8002110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b20      	ldr	r3, [pc, #128]	; (8002194 <HAL_RCC_ClockConfig+0x1b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e032      	b.n	800218a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d008      	beq.n	8002142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002130:	4b19      	ldr	r3, [pc, #100]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4916      	ldr	r1, [pc, #88]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d009      	beq.n	8002162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	490e      	ldr	r1, [pc, #56]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	4313      	orrs	r3, r2
 8002160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002162:	f000 f821 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002166:	4602      	mov	r2, r0
 8002168:	4b0b      	ldr	r3, [pc, #44]	; (8002198 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	490a      	ldr	r1, [pc, #40]	; (800219c <HAL_RCC_ClockConfig+0x1c0>)
 8002174:	5ccb      	ldrb	r3, [r1, r3]
 8002176:	fa22 f303 	lsr.w	r3, r2, r3
 800217a:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f898 	bl	80012b8 <HAL_InitTick>

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023c00 	.word	0x40023c00
 8002198:	40023800 	.word	0x40023800
 800219c:	08003030 	.word	0x08003030
 80021a0:	20000008 	.word	0x20000008
 80021a4:	2000000c 	.word	0x2000000c

080021a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	2300      	movs	r3, #0
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	2300      	movs	r3, #0
 80021ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021c0:	4b67      	ldr	r3, [pc, #412]	; (8002360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 030c 	and.w	r3, r3, #12
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d00d      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x40>
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	f200 80bd 	bhi.w	800234c <HAL_RCC_GetSysClockFreq+0x1a4>
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d002      	beq.n	80021dc <HAL_RCC_GetSysClockFreq+0x34>
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d003      	beq.n	80021e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80021da:	e0b7      	b.n	800234c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021dc:	4b61      	ldr	r3, [pc, #388]	; (8002364 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80021de:	60bb      	str	r3, [r7, #8]
       break;
 80021e0:	e0b7      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021e2:	4b61      	ldr	r3, [pc, #388]	; (8002368 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80021e4:	60bb      	str	r3, [r7, #8]
      break;
 80021e6:	e0b4      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021e8:	4b5d      	ldr	r3, [pc, #372]	; (8002360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021f2:	4b5b      	ldr	r3, [pc, #364]	; (8002360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d04d      	beq.n	800229a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021fe:	4b58      	ldr	r3, [pc, #352]	; (8002360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	099b      	lsrs	r3, r3, #6
 8002204:	461a      	mov	r2, r3
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800220e:	f04f 0100 	mov.w	r1, #0
 8002212:	ea02 0800 	and.w	r8, r2, r0
 8002216:	ea03 0901 	and.w	r9, r3, r1
 800221a:	4640      	mov	r0, r8
 800221c:	4649      	mov	r1, r9
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	f04f 0300 	mov.w	r3, #0
 8002226:	014b      	lsls	r3, r1, #5
 8002228:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800222c:	0142      	lsls	r2, r0, #5
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	ebb0 0008 	subs.w	r0, r0, r8
 8002236:	eb61 0109 	sbc.w	r1, r1, r9
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	f04f 0300 	mov.w	r3, #0
 8002242:	018b      	lsls	r3, r1, #6
 8002244:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002248:	0182      	lsls	r2, r0, #6
 800224a:	1a12      	subs	r2, r2, r0
 800224c:	eb63 0301 	sbc.w	r3, r3, r1
 8002250:	f04f 0000 	mov.w	r0, #0
 8002254:	f04f 0100 	mov.w	r1, #0
 8002258:	00d9      	lsls	r1, r3, #3
 800225a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800225e:	00d0      	lsls	r0, r2, #3
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	eb12 0208 	adds.w	r2, r2, r8
 8002268:	eb43 0309 	adc.w	r3, r3, r9
 800226c:	f04f 0000 	mov.w	r0, #0
 8002270:	f04f 0100 	mov.w	r1, #0
 8002274:	0259      	lsls	r1, r3, #9
 8002276:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800227a:	0250      	lsls	r0, r2, #9
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4610      	mov	r0, r2
 8002282:	4619      	mov	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	461a      	mov	r2, r3
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	f7fd ffa4 	bl	80001d8 <__aeabi_uldivmod>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4613      	mov	r3, r2
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	e04a      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800229a:	4b31      	ldr	r3, [pc, #196]	; (8002360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	099b      	lsrs	r3, r3, #6
 80022a0:	461a      	mov	r2, r3
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022aa:	f04f 0100 	mov.w	r1, #0
 80022ae:	ea02 0400 	and.w	r4, r2, r0
 80022b2:	ea03 0501 	and.w	r5, r3, r1
 80022b6:	4620      	mov	r0, r4
 80022b8:	4629      	mov	r1, r5
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	f04f 0300 	mov.w	r3, #0
 80022c2:	014b      	lsls	r3, r1, #5
 80022c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80022c8:	0142      	lsls	r2, r0, #5
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	1b00      	subs	r0, r0, r4
 80022d0:	eb61 0105 	sbc.w	r1, r1, r5
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	018b      	lsls	r3, r1, #6
 80022de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80022e2:	0182      	lsls	r2, r0, #6
 80022e4:	1a12      	subs	r2, r2, r0
 80022e6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ea:	f04f 0000 	mov.w	r0, #0
 80022ee:	f04f 0100 	mov.w	r1, #0
 80022f2:	00d9      	lsls	r1, r3, #3
 80022f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022f8:	00d0      	lsls	r0, r2, #3
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	1912      	adds	r2, r2, r4
 8002300:	eb45 0303 	adc.w	r3, r5, r3
 8002304:	f04f 0000 	mov.w	r0, #0
 8002308:	f04f 0100 	mov.w	r1, #0
 800230c:	0299      	lsls	r1, r3, #10
 800230e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002312:	0290      	lsls	r0, r2, #10
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	461a      	mov	r2, r3
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	f7fd ff58 	bl	80001d8 <__aeabi_uldivmod>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4613      	mov	r3, r2
 800232e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	0c1b      	lsrs	r3, r3, #16
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	3301      	adds	r3, #1
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	fbb2 f3f3 	udiv	r3, r2, r3
 8002348:	60bb      	str	r3, [r7, #8]
      break;
 800234a:	e002      	b.n	8002352 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800234e:	60bb      	str	r3, [r7, #8]
      break;
 8002350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002352:	68bb      	ldr	r3, [r7, #8]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800235e:	bf00      	nop
 8002360:	40023800 	.word	0x40023800
 8002364:	00f42400 	.word	0x00f42400
 8002368:	007a1200 	.word	0x007a1200

0800236c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_RCC_GetHCLKFreq+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000008 	.word	0x20000008

08002384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002388:	f7ff fff0 	bl	800236c <HAL_RCC_GetHCLKFreq>
 800238c:	4602      	mov	r2, r0
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	0a9b      	lsrs	r3, r3, #10
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	4903      	ldr	r1, [pc, #12]	; (80023a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800239a:	5ccb      	ldrb	r3, [r1, r3]
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800
 80023a8:	08003040 	.word	0x08003040

080023ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80023b0:	f7ff ffdc 	bl	800236c <HAL_RCC_GetHCLKFreq>
 80023b4:	4602      	mov	r2, r0
 80023b6:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	0b5b      	lsrs	r3, r3, #13
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	4903      	ldr	r1, [pc, #12]	; (80023d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c2:	5ccb      	ldrb	r3, [r1, r3]
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40023800 	.word	0x40023800
 80023d0:	08003040 	.word	0x08003040

080023d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	220f      	movs	r2, #15
 80023e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023e4:	4b12      	ldr	r3, [pc, #72]	; (8002430 <HAL_RCC_GetClockConfig+0x5c>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0203 	and.w	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <HAL_RCC_GetClockConfig+0x5c>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023fc:	4b0c      	ldr	r3, [pc, #48]	; (8002430 <HAL_RCC_GetClockConfig+0x5c>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_RCC_GetClockConfig+0x5c>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	08db      	lsrs	r3, r3, #3
 800240e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002416:	4b07      	ldr	r3, [pc, #28]	; (8002434 <HAL_RCC_GetClockConfig+0x60>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0207 	and.w	r2, r3, #7
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	601a      	str	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	40023c00 	.word	0x40023c00

08002438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e041      	b.n	80024ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d106      	bne.n	8002464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f839 	bl	80024d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3304      	adds	r3, #4
 8002474:	4619      	mov	r1, r3
 8002476:	4610      	mov	r0, r2
 8002478:	f000 f9d8 	bl	800282c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}

080024d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
	...

080024ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d001      	beq.n	8002504 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e04e      	b.n	80025a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 0201 	orr.w	r2, r2, #1
 800251a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a23      	ldr	r2, [pc, #140]	; (80025b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d022      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x80>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252e:	d01d      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x80>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1f      	ldr	r2, [pc, #124]	; (80025b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d018      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x80>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1e      	ldr	r2, [pc, #120]	; (80025b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d013      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x80>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <HAL_TIM_Base_Start_IT+0xd0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00e      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x80>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1b      	ldr	r2, [pc, #108]	; (80025c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x80>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a19      	ldr	r2, [pc, #100]	; (80025c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d004      	beq.n	800256c <HAL_TIM_Base_Start_IT+0x80>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a18      	ldr	r2, [pc, #96]	; (80025c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d111      	bne.n	8002590 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2b06      	cmp	r3, #6
 800257c:	d010      	beq.n	80025a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f042 0201 	orr.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800258e:	e007      	b.n	80025a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40010000 	.word	0x40010000
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40000800 	.word	0x40000800
 80025bc:	40000c00 	.word	0x40000c00
 80025c0:	40010400 	.word	0x40010400
 80025c4:	40014000 	.word	0x40014000
 80025c8:	40001800 	.word	0x40001800

080025cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d122      	bne.n	8002628 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d11b      	bne.n	8002628 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f06f 0202 	mvn.w	r2, #2
 80025f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2201      	movs	r2, #1
 80025fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d003      	beq.n	8002616 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	f000 f8ee 	bl	80027f0 <HAL_TIM_IC_CaptureCallback>
 8002614:	e005      	b.n	8002622 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f8e0 	bl	80027dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f8f1 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b04      	cmp	r3, #4
 8002634:	d122      	bne.n	800267c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b04      	cmp	r3, #4
 8002642:	d11b      	bne.n	800267c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0204 	mvn.w	r2, #4
 800264c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2202      	movs	r2, #2
 8002652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f8c4 	bl	80027f0 <HAL_TIM_IC_CaptureCallback>
 8002668:	e005      	b.n	8002676 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f8b6 	bl	80027dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f8c7 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b08      	cmp	r3, #8
 8002688:	d122      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b08      	cmp	r3, #8
 8002696:	d11b      	bne.n	80026d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0208 	mvn.w	r2, #8
 80026a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2204      	movs	r2, #4
 80026a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f89a 	bl	80027f0 <HAL_TIM_IC_CaptureCallback>
 80026bc:	e005      	b.n	80026ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f88c 	bl	80027dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f89d 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b10      	cmp	r3, #16
 80026dc:	d122      	bne.n	8002724 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	d11b      	bne.n	8002724 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f06f 0210 	mvn.w	r2, #16
 80026f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2208      	movs	r2, #8
 80026fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f870 	bl	80027f0 <HAL_TIM_IC_CaptureCallback>
 8002710:	e005      	b.n	800271e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f862 	bl	80027dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f873 	bl	8002804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d10e      	bne.n	8002750 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b01      	cmp	r3, #1
 800273e:	d107      	bne.n	8002750 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f06f 0201 	mvn.w	r2, #1
 8002748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe fd2c 	bl	80011a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800275a:	2b80      	cmp	r3, #128	; 0x80
 800275c:	d10e      	bne.n	800277c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002768:	2b80      	cmp	r3, #128	; 0x80
 800276a:	d107      	bne.n	800277c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f902 	bl	8002980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002786:	2b40      	cmp	r3, #64	; 0x40
 8002788:	d10e      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002794:	2b40      	cmp	r3, #64	; 0x40
 8002796:	d107      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f838 	bl	8002818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d10e      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d107      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0220 	mvn.w	r2, #32
 80027cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8cc 	bl	800296c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a40      	ldr	r2, [pc, #256]	; (8002940 <TIM_Base_SetConfig+0x114>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d013      	beq.n	800286c <TIM_Base_SetConfig+0x40>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284a:	d00f      	beq.n	800286c <TIM_Base_SetConfig+0x40>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a3d      	ldr	r2, [pc, #244]	; (8002944 <TIM_Base_SetConfig+0x118>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00b      	beq.n	800286c <TIM_Base_SetConfig+0x40>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3c      	ldr	r2, [pc, #240]	; (8002948 <TIM_Base_SetConfig+0x11c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d007      	beq.n	800286c <TIM_Base_SetConfig+0x40>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3b      	ldr	r2, [pc, #236]	; (800294c <TIM_Base_SetConfig+0x120>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d003      	beq.n	800286c <TIM_Base_SetConfig+0x40>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a3a      	ldr	r2, [pc, #232]	; (8002950 <TIM_Base_SetConfig+0x124>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d108      	bne.n	800287e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <TIM_Base_SetConfig+0x114>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d02b      	beq.n	80028de <TIM_Base_SetConfig+0xb2>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288c:	d027      	beq.n	80028de <TIM_Base_SetConfig+0xb2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a2c      	ldr	r2, [pc, #176]	; (8002944 <TIM_Base_SetConfig+0x118>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d023      	beq.n	80028de <TIM_Base_SetConfig+0xb2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a2b      	ldr	r2, [pc, #172]	; (8002948 <TIM_Base_SetConfig+0x11c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01f      	beq.n	80028de <TIM_Base_SetConfig+0xb2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a2a      	ldr	r2, [pc, #168]	; (800294c <TIM_Base_SetConfig+0x120>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01b      	beq.n	80028de <TIM_Base_SetConfig+0xb2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a29      	ldr	r2, [pc, #164]	; (8002950 <TIM_Base_SetConfig+0x124>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d017      	beq.n	80028de <TIM_Base_SetConfig+0xb2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a28      	ldr	r2, [pc, #160]	; (8002954 <TIM_Base_SetConfig+0x128>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d013      	beq.n	80028de <TIM_Base_SetConfig+0xb2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a27      	ldr	r2, [pc, #156]	; (8002958 <TIM_Base_SetConfig+0x12c>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00f      	beq.n	80028de <TIM_Base_SetConfig+0xb2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a26      	ldr	r2, [pc, #152]	; (800295c <TIM_Base_SetConfig+0x130>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00b      	beq.n	80028de <TIM_Base_SetConfig+0xb2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a25      	ldr	r2, [pc, #148]	; (8002960 <TIM_Base_SetConfig+0x134>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d007      	beq.n	80028de <TIM_Base_SetConfig+0xb2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a24      	ldr	r2, [pc, #144]	; (8002964 <TIM_Base_SetConfig+0x138>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d003      	beq.n	80028de <TIM_Base_SetConfig+0xb2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a23      	ldr	r2, [pc, #140]	; (8002968 <TIM_Base_SetConfig+0x13c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d108      	bne.n	80028f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <TIM_Base_SetConfig+0x114>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d003      	beq.n	8002924 <TIM_Base_SetConfig+0xf8>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <TIM_Base_SetConfig+0x124>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d103      	bne.n	800292c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	615a      	str	r2, [r3, #20]
}
 8002932:	bf00      	nop
 8002934:	3714      	adds	r7, #20
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	40010000 	.word	0x40010000
 8002944:	40000400 	.word	0x40000400
 8002948:	40000800 	.word	0x40000800
 800294c:	40000c00 	.word	0x40000c00
 8002950:	40010400 	.word	0x40010400
 8002954:	40014000 	.word	0x40014000
 8002958:	40014400 	.word	0x40014400
 800295c:	40014800 	.word	0x40014800
 8002960:	40001800 	.word	0x40001800
 8002964:	40001c00 	.word	0x40001c00
 8002968:	40002000 	.word	0x40002000

0800296c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e03f      	b.n	8002a26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe fc34 	bl	8001228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2224      	movs	r2, #36	; 0x24
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f929 	bl	8002c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b08a      	sub	sp, #40	; 0x28
 8002a32:	af02      	add	r7, sp, #8
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d17c      	bne.n	8002b48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_UART_Transmit+0x2c>
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e075      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_UART_Transmit+0x3e>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e06e      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2221      	movs	r2, #33	; 0x21
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a82:	f7fe fd21 	bl	80014c8 <HAL_GetTick>
 8002a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9c:	d108      	bne.n	8002ab0 <HAL_UART_Transmit+0x82>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d104      	bne.n	8002ab0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	e003      	b.n	8002ab8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ac0:	e02a      	b.n	8002b18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f840 	bl	8002b52 <UART_WaitOnFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e036      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	3302      	adds	r3, #2
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	e007      	b.n	8002b0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	3301      	adds	r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1cf      	bne.n	8002ac2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2140      	movs	r1, #64	; 0x40
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f810 	bl	8002b52 <UART_WaitOnFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e006      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b090      	sub	sp, #64	; 0x40
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b62:	e050      	b.n	8002c06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6a:	d04c      	beq.n	8002c06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b72:	f7fe fca9 	bl	80014c8 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d241      	bcs.n	8002c06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	330c      	adds	r3, #12
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	e853 3f00 	ldrex	r3, [r3]
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	330c      	adds	r3, #12
 8002ba0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ba2:	637a      	str	r2, [r7, #52]	; 0x34
 8002ba4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e5      	bne.n	8002b82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3314      	adds	r3, #20
 8002bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	e853 3f00 	ldrex	r3, [r3]
 8002bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3314      	adds	r3, #20
 8002bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bd6:	623a      	str	r2, [r7, #32]
 8002bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bda:	69f9      	ldr	r1, [r7, #28]
 8002bdc:	6a3a      	ldr	r2, [r7, #32]
 8002bde:	e841 2300 	strex	r3, r2, [r1]
 8002be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1e5      	bne.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e00f      	b.n	8002c26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d09f      	beq.n	8002b64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3740      	adds	r7, #64	; 0x40
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c34:	b09f      	sub	sp, #124	; 0x7c
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	68d9      	ldr	r1, [r3, #12]
 8002c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	ea40 0301 	orr.w	r3, r0, r1
 8002c50:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c74:	f021 010c 	bic.w	r1, r1, #12
 8002c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c7e:	430b      	orrs	r3, r1
 8002c80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c8e:	6999      	ldr	r1, [r3, #24]
 8002c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	ea40 0301 	orr.w	r3, r0, r1
 8002c98:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4bc5      	ldr	r3, [pc, #788]	; (8002fb4 <UART_SetConfig+0x384>)
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d004      	beq.n	8002cae <UART_SetConfig+0x7e>
 8002ca4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4bc3      	ldr	r3, [pc, #780]	; (8002fb8 <UART_SetConfig+0x388>)
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d103      	bne.n	8002cb6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cae:	f7ff fb7d 	bl	80023ac <HAL_RCC_GetPCLK2Freq>
 8002cb2:	6778      	str	r0, [r7, #116]	; 0x74
 8002cb4:	e002      	b.n	8002cbc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cb6:	f7ff fb65 	bl	8002384 <HAL_RCC_GetPCLK1Freq>
 8002cba:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc4:	f040 80b6 	bne.w	8002e34 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cca:	461c      	mov	r4, r3
 8002ccc:	f04f 0500 	mov.w	r5, #0
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	462b      	mov	r3, r5
 8002cd4:	1891      	adds	r1, r2, r2
 8002cd6:	6439      	str	r1, [r7, #64]	; 0x40
 8002cd8:	415b      	adcs	r3, r3
 8002cda:	647b      	str	r3, [r7, #68]	; 0x44
 8002cdc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ce0:	1912      	adds	r2, r2, r4
 8002ce2:	eb45 0303 	adc.w	r3, r5, r3
 8002ce6:	f04f 0000 	mov.w	r0, #0
 8002cea:	f04f 0100 	mov.w	r1, #0
 8002cee:	00d9      	lsls	r1, r3, #3
 8002cf0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cf4:	00d0      	lsls	r0, r2, #3
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	1911      	adds	r1, r2, r4
 8002cfc:	6639      	str	r1, [r7, #96]	; 0x60
 8002cfe:	416b      	adcs	r3, r5
 8002d00:	667b      	str	r3, [r7, #100]	; 0x64
 8002d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	461a      	mov	r2, r3
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	1891      	adds	r1, r2, r2
 8002d0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d10:	415b      	adcs	r3, r3
 8002d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d18:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002d1c:	f7fd fa5c 	bl	80001d8 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4ba5      	ldr	r3, [pc, #660]	; (8002fbc <UART_SetConfig+0x38c>)
 8002d26:	fba3 2302 	umull	r2, r3, r3, r2
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	011e      	lsls	r6, r3, #4
 8002d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d30:	461c      	mov	r4, r3
 8002d32:	f04f 0500 	mov.w	r5, #0
 8002d36:	4622      	mov	r2, r4
 8002d38:	462b      	mov	r3, r5
 8002d3a:	1891      	adds	r1, r2, r2
 8002d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8002d3e:	415b      	adcs	r3, r3
 8002d40:	637b      	str	r3, [r7, #52]	; 0x34
 8002d42:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d46:	1912      	adds	r2, r2, r4
 8002d48:	eb45 0303 	adc.w	r3, r5, r3
 8002d4c:	f04f 0000 	mov.w	r0, #0
 8002d50:	f04f 0100 	mov.w	r1, #0
 8002d54:	00d9      	lsls	r1, r3, #3
 8002d56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d5a:	00d0      	lsls	r0, r2, #3
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	1911      	adds	r1, r2, r4
 8002d62:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d64:	416b      	adcs	r3, r5
 8002d66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	1891      	adds	r1, r2, r2
 8002d74:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d76:	415b      	adcs	r3, r3
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002d82:	f7fd fa29 	bl	80001d8 <__aeabi_uldivmod>
 8002d86:	4602      	mov	r2, r0
 8002d88:	460b      	mov	r3, r1
 8002d8a:	4b8c      	ldr	r3, [pc, #560]	; (8002fbc <UART_SetConfig+0x38c>)
 8002d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8002d90:	095b      	lsrs	r3, r3, #5
 8002d92:	2164      	movs	r1, #100	; 0x64
 8002d94:	fb01 f303 	mul.w	r3, r1, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	3332      	adds	r3, #50	; 0x32
 8002d9e:	4a87      	ldr	r2, [pc, #540]	; (8002fbc <UART_SetConfig+0x38c>)
 8002da0:	fba2 2303 	umull	r2, r3, r2, r3
 8002da4:	095b      	lsrs	r3, r3, #5
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002dac:	441e      	add	r6, r3
 8002dae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002db0:	4618      	mov	r0, r3
 8002db2:	f04f 0100 	mov.w	r1, #0
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	1894      	adds	r4, r2, r2
 8002dbc:	623c      	str	r4, [r7, #32]
 8002dbe:	415b      	adcs	r3, r3
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dc6:	1812      	adds	r2, r2, r0
 8002dc8:	eb41 0303 	adc.w	r3, r1, r3
 8002dcc:	f04f 0400 	mov.w	r4, #0
 8002dd0:	f04f 0500 	mov.w	r5, #0
 8002dd4:	00dd      	lsls	r5, r3, #3
 8002dd6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002dda:	00d4      	lsls	r4, r2, #3
 8002ddc:	4622      	mov	r2, r4
 8002dde:	462b      	mov	r3, r5
 8002de0:	1814      	adds	r4, r2, r0
 8002de2:	653c      	str	r4, [r7, #80]	; 0x50
 8002de4:	414b      	adcs	r3, r1
 8002de6:	657b      	str	r3, [r7, #84]	; 0x54
 8002de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	461a      	mov	r2, r3
 8002dee:	f04f 0300 	mov.w	r3, #0
 8002df2:	1891      	adds	r1, r2, r2
 8002df4:	61b9      	str	r1, [r7, #24]
 8002df6:	415b      	adcs	r3, r3
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dfe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002e02:	f7fd f9e9 	bl	80001d8 <__aeabi_uldivmod>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4b6c      	ldr	r3, [pc, #432]	; (8002fbc <UART_SetConfig+0x38c>)
 8002e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	2164      	movs	r1, #100	; 0x64
 8002e14:	fb01 f303 	mul.w	r3, r1, r3
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	3332      	adds	r3, #50	; 0x32
 8002e1e:	4a67      	ldr	r2, [pc, #412]	; (8002fbc <UART_SetConfig+0x38c>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	095b      	lsrs	r3, r3, #5
 8002e26:	f003 0207 	and.w	r2, r3, #7
 8002e2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4432      	add	r2, r6
 8002e30:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e32:	e0b9      	b.n	8002fa8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e36:	461c      	mov	r4, r3
 8002e38:	f04f 0500 	mov.w	r5, #0
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	462b      	mov	r3, r5
 8002e40:	1891      	adds	r1, r2, r2
 8002e42:	6139      	str	r1, [r7, #16]
 8002e44:	415b      	adcs	r3, r3
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e4c:	1912      	adds	r2, r2, r4
 8002e4e:	eb45 0303 	adc.w	r3, r5, r3
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f04f 0100 	mov.w	r1, #0
 8002e5a:	00d9      	lsls	r1, r3, #3
 8002e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e60:	00d0      	lsls	r0, r2, #3
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	eb12 0804 	adds.w	r8, r2, r4
 8002e6a:	eb43 0905 	adc.w	r9, r3, r5
 8002e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f04f 0100 	mov.w	r1, #0
 8002e78:	f04f 0200 	mov.w	r2, #0
 8002e7c:	f04f 0300 	mov.w	r3, #0
 8002e80:	008b      	lsls	r3, r1, #2
 8002e82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002e86:	0082      	lsls	r2, r0, #2
 8002e88:	4640      	mov	r0, r8
 8002e8a:	4649      	mov	r1, r9
 8002e8c:	f7fd f9a4 	bl	80001d8 <__aeabi_uldivmod>
 8002e90:	4602      	mov	r2, r0
 8002e92:	460b      	mov	r3, r1
 8002e94:	4b49      	ldr	r3, [pc, #292]	; (8002fbc <UART_SetConfig+0x38c>)
 8002e96:	fba3 2302 	umull	r2, r3, r3, r2
 8002e9a:	095b      	lsrs	r3, r3, #5
 8002e9c:	011e      	lsls	r6, r3, #4
 8002e9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f04f 0100 	mov.w	r1, #0
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	1894      	adds	r4, r2, r2
 8002eac:	60bc      	str	r4, [r7, #8]
 8002eae:	415b      	adcs	r3, r3
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002eb6:	1812      	adds	r2, r2, r0
 8002eb8:	eb41 0303 	adc.w	r3, r1, r3
 8002ebc:	f04f 0400 	mov.w	r4, #0
 8002ec0:	f04f 0500 	mov.w	r5, #0
 8002ec4:	00dd      	lsls	r5, r3, #3
 8002ec6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002eca:	00d4      	lsls	r4, r2, #3
 8002ecc:	4622      	mov	r2, r4
 8002ece:	462b      	mov	r3, r5
 8002ed0:	1814      	adds	r4, r2, r0
 8002ed2:	64bc      	str	r4, [r7, #72]	; 0x48
 8002ed4:	414b      	adcs	r3, r1
 8002ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f04f 0100 	mov.w	r1, #0
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	008b      	lsls	r3, r1, #2
 8002eec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002ef0:	0082      	lsls	r2, r0, #2
 8002ef2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002ef6:	f7fd f96f 	bl	80001d8 <__aeabi_uldivmod>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4b2f      	ldr	r3, [pc, #188]	; (8002fbc <UART_SetConfig+0x38c>)
 8002f00:	fba3 1302 	umull	r1, r3, r3, r2
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	2164      	movs	r1, #100	; 0x64
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	3332      	adds	r3, #50	; 0x32
 8002f12:	4a2a      	ldr	r2, [pc, #168]	; (8002fbc <UART_SetConfig+0x38c>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f1e:	441e      	add	r6, r3
 8002f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f22:	4618      	mov	r0, r3
 8002f24:	f04f 0100 	mov.w	r1, #0
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	1894      	adds	r4, r2, r2
 8002f2e:	603c      	str	r4, [r7, #0]
 8002f30:	415b      	adcs	r3, r3
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f38:	1812      	adds	r2, r2, r0
 8002f3a:	eb41 0303 	adc.w	r3, r1, r3
 8002f3e:	f04f 0400 	mov.w	r4, #0
 8002f42:	f04f 0500 	mov.w	r5, #0
 8002f46:	00dd      	lsls	r5, r3, #3
 8002f48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002f4c:	00d4      	lsls	r4, r2, #3
 8002f4e:	4622      	mov	r2, r4
 8002f50:	462b      	mov	r3, r5
 8002f52:	eb12 0a00 	adds.w	sl, r2, r0
 8002f56:	eb43 0b01 	adc.w	fp, r3, r1
 8002f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f04f 0100 	mov.w	r1, #0
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	008b      	lsls	r3, r1, #2
 8002f6e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002f72:	0082      	lsls	r2, r0, #2
 8002f74:	4650      	mov	r0, sl
 8002f76:	4659      	mov	r1, fp
 8002f78:	f7fd f92e 	bl	80001d8 <__aeabi_uldivmod>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	460b      	mov	r3, r1
 8002f80:	4b0e      	ldr	r3, [pc, #56]	; (8002fbc <UART_SetConfig+0x38c>)
 8002f82:	fba3 1302 	umull	r1, r3, r3, r2
 8002f86:	095b      	lsrs	r3, r3, #5
 8002f88:	2164      	movs	r1, #100	; 0x64
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	3332      	adds	r3, #50	; 0x32
 8002f94:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <UART_SetConfig+0x38c>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	f003 020f 	and.w	r2, r3, #15
 8002fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4432      	add	r2, r6
 8002fa6:	609a      	str	r2, [r3, #8]
}
 8002fa8:	bf00      	nop
 8002faa:	377c      	adds	r7, #124	; 0x7c
 8002fac:	46bd      	mov	sp, r7
 8002fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40011000 	.word	0x40011000
 8002fb8:	40011400 	.word	0x40011400
 8002fbc:	51eb851f 	.word	0x51eb851f

08002fc0 <__libc_init_array>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	4d0d      	ldr	r5, [pc, #52]	; (8002ff8 <__libc_init_array+0x38>)
 8002fc4:	4c0d      	ldr	r4, [pc, #52]	; (8002ffc <__libc_init_array+0x3c>)
 8002fc6:	1b64      	subs	r4, r4, r5
 8002fc8:	10a4      	asrs	r4, r4, #2
 8002fca:	2600      	movs	r6, #0
 8002fcc:	42a6      	cmp	r6, r4
 8002fce:	d109      	bne.n	8002fe4 <__libc_init_array+0x24>
 8002fd0:	4d0b      	ldr	r5, [pc, #44]	; (8003000 <__libc_init_array+0x40>)
 8002fd2:	4c0c      	ldr	r4, [pc, #48]	; (8003004 <__libc_init_array+0x44>)
 8002fd4:	f000 f820 	bl	8003018 <_init>
 8002fd8:	1b64      	subs	r4, r4, r5
 8002fda:	10a4      	asrs	r4, r4, #2
 8002fdc:	2600      	movs	r6, #0
 8002fde:	42a6      	cmp	r6, r4
 8002fe0:	d105      	bne.n	8002fee <__libc_init_array+0x2e>
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fe8:	4798      	blx	r3
 8002fea:	3601      	adds	r6, #1
 8002fec:	e7ee      	b.n	8002fcc <__libc_init_array+0xc>
 8002fee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff2:	4798      	blx	r3
 8002ff4:	3601      	adds	r6, #1
 8002ff6:	e7f2      	b.n	8002fde <__libc_init_array+0x1e>
 8002ff8:	08003050 	.word	0x08003050
 8002ffc:	08003050 	.word	0x08003050
 8003000:	08003050 	.word	0x08003050
 8003004:	08003054 	.word	0x08003054

08003008 <memset>:
 8003008:	4402      	add	r2, r0
 800300a:	4603      	mov	r3, r0
 800300c:	4293      	cmp	r3, r2
 800300e:	d100      	bne.n	8003012 <memset+0xa>
 8003010:	4770      	bx	lr
 8003012:	f803 1b01 	strb.w	r1, [r3], #1
 8003016:	e7f9      	b.n	800300c <memset+0x4>

08003018 <_init>:
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	bf00      	nop
 800301c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800301e:	bc08      	pop	{r3}
 8003020:	469e      	mov	lr, r3
 8003022:	4770      	bx	lr

08003024 <_fini>:
 8003024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003026:	bf00      	nop
 8003028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302a:	bc08      	pop	{r3}
 800302c:	469e      	mov	lr, r3
 800302e:	4770      	bx	lr
